name: Complete CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south1-a
  APP_DOMAIN: http://myapp.awsaparna123.xyz
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend
  HELM_VERSION: v3.12.0
  CHART_PATH: ./backend/imdb-clone
  NOTIFICATION_EMAIL: mjai3747@gmail.com

jobs:
  # Frontend Security & Quality Checks
  frontend-security:
    name: Frontend Security Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.63.3
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript
          
      - name: Run Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run ESLint
        run: |
          npm install eslint
          npx eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true

      - name: Run npm audit
        run: npm audit --json > npm-audit.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-reports
          path: |
            eslint-report.json
            npm-audit.json
          retention-days: 7

      - name: Notify Security Results
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Frontend Security Scan Results
          to: ${{ env.NOTIFICATION_EMAIL }}
          from: GitHub Actions
          body: |
            Frontend security scan completed
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}

  # Backend Security & Quality Checks
  backend-security:
    name: Backend Security Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      # Same security tools as frontend
      - name: Run Security Scans
        run: |
          # TruffleHog
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest filesystem /pwd

          # Snyk
          npx snyk test --json > snyk-report.json || true

          # npm audit
          npm audit --json > npm-audit.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-reports
          path: |
            snyk-report.json
            npm-audit.json
          retention-days: 7

  # Build Jobs
  frontend-build:
    needs: [frontend-security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            ${{ env.FRONTEND_IMAGE }}:latest

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ env.APP_DOMAIN }}
          uploadArtifacts: true

  backend-build:
    needs: [backend-security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
            ${{ env.BACKEND_IMAGE }}:latest

  # Deployment Jobs
  deploy-dev:
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy to Development
        uses: ./backend/.github/actions/k8s-setup
        with:
          helm-version: ${{ env.HELM_VERSION }}
          gcp-credentials: ${{ secrets.GCP_SA_KEY }}
          gcp-project-id: ${{ secrets.GCP_PROJECT_ID }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          cluster-zone: ${{ env.CLUSTER_ZONE }}

      - name: Run Health Checks
        run: |
          curl --fail ${{ env.APP_DOMAIN }}/health
          curl --fail ${{ env.APP_DOMAIN }}/api/health

      - name: Notify Deployment
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Development Deployment Status
          to: ${{ env.NOTIFICATION_EMAIL }}
          body: |
            Development deployment completed
            Status: ${{ job.status }}
            URL: ${{ env.APP_DOMAIN }}

  deploy-staging:
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to Staging
        uses: ./backend/.github/actions/k8s-setup
        with:
          helm-version: ${{ env.HELM_VERSION }}
          gcp-credentials: ${{ secrets.GCP_SA_KEY }}
          gcp-project-id: ${{ secrets.GCP_PROJECT_ID }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          cluster-zone: ${{ env.CLUSTER_ZONE }}

      - name: Run Load Tests
        run: |
          npm install -g k6
          k6 run load-tests.js

      - name: Notify Deployment
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Staging Deployment Status
          to: ${{ env.NOTIFICATION_EMAIL }}
          body: |
            Staging deployment completed
            Status: ${{ job.status }}
            Load Test Results: Attached

  deploy-prod:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Backup Database
        run: |
          mongodump --uri="${{ secrets.MONGO_URL }}" --archive=backup.gz --gzip

      - name: Deploy to Production
        uses: ./backend/.github/actions/k8s-setup
        with:
          helm-version: ${{ env.HELM_VERSION }}
          gcp-credentials: ${{ secrets.GCP_SA_KEY }}
          gcp-project-id: ${{ secrets.GCP_PROJECT_ID }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          cluster-zone: ${{ env.CLUSTER_ZONE }}

      - name: Verify Deployment
        run: |
          kubectl rollout status deployment/frontend -n production
          kubectl rollout status deployment/backend -n production

      - name: Notify Deployment
        uses: dawidd6/action-send-mail@v3
        if: always()
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Production Deployment Status
          to: ${{ env.NOTIFICATION_EMAIL }}
          body: |
            Production deployment completed
            Status: ${{ job.status }}
            URL: ${{ env.APP_DOMAIN }}
            Backup Status: Completed

  cleanup:
    needs: [deploy-prod]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Old Images
        run: |
          docker image prune -a --force --filter "until=168h"

      - name: Cleanup Old Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            frontend-security-reports
            backend-security-reports
          age: 1 week

      - name: Send Final Report
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: Pipeline Complete
          to: ${{ env.NOTIFICATION_EMAIL }}
          body: |
            Pipeline completed
            Final Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Cleanup Status: Completed
