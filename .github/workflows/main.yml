# name: Security & Build Pipeline

# on:
#   workflow_dispatch:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# env:
#   NODE_OPTIONS: --openssl-legacy-provider

# jobs:
#   frontend-security:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/MY-FRONTEND
#       - uses: actions/setup-node@v4.0.2
#         with:
#           node-version: '18'
#           cache: 'npm'
      
#       - name: SAC (Snyk) Scan
#         run: |
#           npm install
#           npm install -g snyk
#           snyk test --json > frontend-sac.json || true
#           echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#       - name: Frontend TruffleHog
#         run: |
#           docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
#             filesystem /pwd --json > frontend-secrets.json || true
#           echo "### Frontend Secrets Found" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' frontend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

#   backend-security:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/MY-BACKEND
#       - uses: actions/setup-node@v4.0.2
#         with:
#           node-version: '18'
#           cache: 'npm'
      
#       - name: SAC (Snyk) Scan
#         run: |
#           npm install
#           npm install -g snyk
#           snyk test --json > backend-sac.json || true
#           echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#       - name: Backend TruffleHog
#         run: |
#           docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
#             filesystem /pwd --json > backend-secrets.json || true
#           echo "### Backend Secrets Found" >> $GITHUB_STEP_SUMMARY
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
#           jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' backend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
#           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

#   frontend-build:
#     needs: frontend-security
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/imdb-clone-frontend
#       - uses: actions/setup-node@v4.0.2
#         with:
#           node-version: '18'
#           cache: 'npm'
#       - name: Build Frontend
#         run: |
#           npm install react@18 react-dom@18 react-scripts@5.0.1 --save
#           npm install
#           if ! grep -q '"build"' package.json; then
#             npm pkg set scripts.build="react-scripts build"
#           fi
#           npm run build
#         env:
#           CI: false

#   backend-build:
#     needs: backend-security
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4.1.1
#         with:
#           repository: jai3747/imdb-clone-backend
#       - uses: actions/setup-node@v4.0.2
#         with:
#           node-version: '18'
#           cache: 'npm'
#       - name: Initialize TypeScript
#         run: |
#           npm init -y
#           npm install typescript @types/node @types/express --save-dev
#           npx tsc --init
#       - name: Create TypeScript Config
#         run: |
#           echo '{
#             "compilerOptions": {
#               "target": "es2020",
#               "module": "commonjs",
#               "outDir": "./dist",
#               "rootDir": "./src",
#               "strict": true,
#               "esModuleInterop": true
#             },
#             "include": ["src/**/*"],
#             "exclude": ["node_modules"]
#           }' > tsconfig.json
#       - name: Ensure Source Directory
#         run: |
#           mkdir -p src
#           if [ ! -f src/index.ts ]; then
#             echo 'console.log("Backend running");' > src/index.ts
#           fi
#       - name: Build Backend
#         run: |
#           npm pkg set scripts.build="tsc"
#           npm install
#           npm run build

#   report:
#     needs: [frontend-security, backend-security, frontend-build, backend-build]
#     runs-on: ubuntu-latest
#     if: always()
#     steps:
#       - name: Generate Final Report
#         run: |
#           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
#           echo "## Build Status" >> $GITHUB_STEP_SUMMARY
#           echo "- Frontend Build: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "- Backend Build: ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
#           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
#           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
#           echo "### Backend" >> $GITHUB_STEP_SUMMARY
#           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# permissions:
#   contents: read
#   security-events: write


name: IMDB Clone CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  security-scan-frontend:
    name: Security Scan Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Stage 1: Trufflehog - Secret Scanner
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./imdb-clone-frontend
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

      # Stage 2: Semgrep - SAST Scanner
      - name: Semgrep Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: >-
            p/security-audit
            p/javascript
          publishToken: ${{ secrets.SEMGREP_TOKEN }}
          publishDeployment: 1

      # Stage 3: Snyk - SCA Scanner
      - name: Run Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects

  security-scan-backend:
    name: Security Scan Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Stage 1: Trufflehog
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./imdb-clone-backend
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

      # Stage 2: Semgrep
      - name: Semgrep Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: >-
            p/security-audit
            p/javascript
          publishToken: ${{ secrets.SEMGREP_TOKEN }}
          publishDeployment: 1

      # Stage 3: Snyk
      - name: Run Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects

  build-and-push:
    name: Build and Push Docker Images
    needs: [security-scan-frontend, security-scan-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Stage 4: Build and Push Frontend
      - name: Build and Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./imdb-clone-frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}

      # Build and Push Backend
      - name: Build and Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./imdb-clone-backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Stage 5: Deploy to Kubernetes
      - name: Set up kubectl
        uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Update kubernetes deployment
        run: |
          cd imdb-clone-backend
          # Update image tags in k8s.yaml
          sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|' k8s.yaml
          kubectl apply -f k8s.yaml
