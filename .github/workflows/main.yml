# name: Security & Build Pipeline

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
#   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#   MONGO_URL: ${{ secrets.MONGO_URL }}
#   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
#   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#   GH_PAT: ${{ secrets.GH_PAT }}
#   CLUSTER_NAME: cluster-1
#   CLUSTER_ZONE: asia-south1-a
#   APP_DOMAIN: "http://myapp.awsaparna123.xyz"

# permissions:
#   contents: read
#   security-events: write
#   actions: write

# jobs:
#   # Frontend Security Scans
#   frontend-security:
#     name: Frontend Security Scans
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         tool: [trufflehog, semgrep, snyk, checkov]
#     steps:
#       - name: Checkout Frontend Code
#         uses: actions/checkout@v4
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}
#           fetch-depth: 0

#       - name: TruffleHog Scan
#         if: matrix.tool == 'trufflehog'
#         uses: trufflesecurity/trufflehog@v3.63.3
#         continue-on-error: true
#         with:
#           path: .
#           base: ${{ github.event.before }}
#           head: ${{ github.sha }}
#           extra_args: --json --output trufflehog-frontend-report.json

#       - name: Semgrep Scan
#         if: matrix.tool == 'semgrep'
#         uses: semgrep/semgrep-action@v1
#         continue-on-error: true
#         with:
#           config: p/javascript
#           output: semgrep-frontend-results.json
#           json: true

#       - name: Snyk Scan
#         if: matrix.tool == 'snyk'
#         uses: snyk/actions/node@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           command: test --json > snyk-frontend-report.json

#       - name: Checkov Scan
#         if: matrix.tool == 'checkov'
#         uses: bridgecrewio/checkov-action@v12
#         continue-on-error: true
#         with:
#           directory: .
#           framework: dockerfile,kubernetes,secrets
#           output: json
#           output-file-path: checkov-frontend-report.json

#       - name: Upload Scan Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: frontend-${{ matrix.tool }}-report
#           path: |
#             *frontend*report.json
#             *frontend*results.json
#           retention-days: 30

#   # Backend Security Scans
#   backend-security:
#     name: Backend Security Scans
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         tool: [trufflehog, semgrep, snyk, checkov]
#     steps:
#       - name: Checkout Backend Code
#         uses: actions/checkout@v4
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}
#           fetch-depth: 0

#       - name: TruffleHog Scan
#         if: matrix.tool == 'trufflehog'
#         uses: trufflesecurity/trufflehog@v3.63.3
#         continue-on-error: true
#         with:
#           path: .
#           base: ${{ github.event.before }}
#           head: ${{ github.sha }}
#           extra_args: --json --output trufflehog-backend-report.json

#       - name: Semgrep Scan
#         if: matrix.tool == 'semgrep'
#         uses: semgrep/semgrep-action@v1
#         continue-on-error: true
#         with:
#           config: p/javascript
#           output: semgrep-backend-results.json
#           json: true

#       - name: Snyk Scan
#         if: matrix.tool == 'snyk'
#         uses: snyk/actions/node@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           command: test --json > snyk-backend-report.json

#       - name: Checkov Scan
#         if: matrix.tool == 'checkov'
#         uses: bridgecrewio/checkov-action@v12
#         continue-on-error: true
#         with:
#           directory: .
#           framework: dockerfile,kubernetes,secrets
#           output: json
#           output-file-path: checkov-backend-report.json

#       - name: Upload Scan Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: backend-${{ matrix.tool }}-report
#           path: |
#             *backend*report.json
#             *backend*results.json
#           retention-days: 30

#   # DAST Scans
#   dast-scans:
#     name: DAST Security Scans
#     runs-on: ubuntu-latest
#     needs: [deploy]
#     strategy:
#       matrix:
#         tool: [zap, nuclei]
#     steps:
#       - name: Health Check
#         run: |
#           timeout=300
#           start_time=$(date +%s)
#           while true; do
#             current_time=$(date +%s)
#             elapsed=$((current_time - start_time))
#             if [ $elapsed -gt $timeout ]; then
#               echo "Timeout waiting for deployment"
#               exit 1
#             fi
#             if curl -s -f "${{ env.APP_DOMAIN }}/health" >/dev/null; then
#               echo "Service is up!"
#               break
#             fi
#             echo "Waiting for service to be available..."
#             sleep 10
#           done

#       - name: ZAP Scan
#         if: matrix.tool == 'zap'
#         uses: zaproxy/action-baseline@v0.11.0
#         continue-on-error: true
#         with:
#           target: ${{ env.APP_DOMAIN }}
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a -j'
#           format: json
#           allow_issue_writing: true

#       - name: Nuclei Scan
#         if: matrix.tool == 'nuclei'
#         uses: projectdiscovery/nuclei-action@v2
#         continue-on-error: true
#         with:
#           target: ${{ env.APP_DOMAIN }}
#           templates: "cves,vulnerabilities,exposures,misconfiguration"
#           severity: "critical,high,medium"
#           output: "nuclei-report.json"
#           json: true
#           rate-limit: 150
#           bulk-size: 25

#       - name: Upload DAST Results
#         uses: actions/upload-artifact@v4
#         with:
#           name: dast-${{ matrix.tool }}-report
#           path: |
#             *report.json
#           retention-days: 30

#   # Build Jobs
#   frontend-build:
#     needs: [frontend-security]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Frontend Code
#         uses: actions/checkout@v4
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '16'
#           cache: 'npm'

#       - name: Install Dependencies
#         run: npm ci

#       - name: Run Tests
#         run: npm test
#         continue-on-error: true

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Frontend Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
#           cache-to: type=inline
#           build-args: |
#             NODE_ENV=production

#   backend-build:
#     needs: [backend-security]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Backend Code
#         uses: actions/checkout@v4
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '16'
#           cache: 'npm'

#       - name: Install Dependencies
#         run: npm ci

#       - name: Run Tests
#         run: npm test
#         continue-on-error: true

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Backend Image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
#           cache-to: type=inline
#           build-args: |
#             NODE_ENV=production

#   # Deploy Job
#   deploy:
#     needs: [frontend-build, backend-build]
#     runs-on: ubuntu-latest
#     environment: production
#     steps:
#       - name: Checkout Infrastructure Code
#         uses: actions/checkout@v4
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}
#           path: backend

#       - name: Google Auth
#         uses: google-github-actions/auth@v2
#         with:
#           credentials_json: '${{ secrets.GCP_SA_KEY }}'

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v2

#       - name: Install kubectl
#         run: |
#           gcloud components install kubectl gke-gcloud-auth-plugin
#           gcloud --quiet auth configure-docker

#       - name: Get GKE Credentials
#         run: |
#           gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
#             --zone ${{ env.CLUSTER_ZONE }} \
#             --project ${{ secrets.GCP_PROJECT_ID }}

#       - name: Deploy to Kubernetes
#         run: |
#           kubectl create namespace mongodb --dry-run=client -o yaml | kubectl apply -f -
#           kubectl create namespace backend --dry-run=client -o yaml | kubectl apply -f -
#           kubectl create namespace frontend --dry-run=client -o yaml | kubectl apply -f -
          
#           cd backend
#           kubectl create secret generic mongodb-secret \
#             --namespace mongodb \
#             --from-literal=MONGO_URL="${{ secrets.MONGO_URL }}" \
#             --dry-run=client -o yaml | kubectl apply -f -
            
#           kubectl apply -f k8.yaml --namespace mongodb
          
#           sed -i "s|image: .*imdb-clone-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}|g" k8.yaml
#           kubectl apply -f k8.yaml --namespace backend
          
#           sed -i "s|image: .*imdb-clone-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}|g" k8.yaml
#           kubectl apply -f k8.yaml --namespace frontend

#       - name: Verify Deployment
#         run: |
#           kubectl wait --for=condition=ready pod -l app=mongodb --namespace mongodb --timeout=5m
#           kubectl wait --for=condition=ready pod -l app=backend --namespace backend --timeout=5m
#           kubectl wait --for=condition=ready pod -l app=frontend --namespace frontend --timeout=5m

#       - name: Upload Deployment Logs
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: deployment-logs
#           path: |
#             mongodb-logs.txt
#             backend-logs.txt
#             frontend-logs.txt
#           retention-days: 7

#   # Report Aggregation
#   report-aggregation:
#     needs: [frontend-security, backend-security, dast-scans]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download All Artifacts
#         uses: actions/download-artifact@v4
#         with:
#           path: security-reports
#           pattern: '*-report'
#           merge-multiple: true

#       - name: Generate Security Dashboard
#         uses: actions/github-script@v7
#         with:
#           script: |
#             const fs = require('fs');
#             const path = require('path');
            
#             // Process all reports and generate statistics
#             const stats = {
#               frontend: { critical: 0, high: 0, medium: 0, low: 0 },
#               backend: { critical: 0, high: 0, medium: 0, low: 0 },
#               dast: { critical: 0, high: 0, medium: 0, low: 0 }
#             };
            
#             // Create markdown report
#             let markdown = '# Security Scan Results\n\n';
#             markdown += '## Summary\n\n';
#             markdown += '| Component | Critical | High | Medium | Low |\n';
#             markdown += '|-----------|----------|------|---------|-----|\n';
            
#             for (const [component, counts] of Object.entries(stats)) {
#               markdown += `| ${component} | ${counts.critical} | ${counts.high} | ${counts.medium} | ${counts.low} |\n`;
#             }
            
#             fs.writeFileSync('security-dashboard.md', markdown);

#       - name: Upload Security Dashboard
#         uses: actions/upload-artifact@v4
#         with:
#           name: security-dashboard
#           path: security-dashboard.md
#           retention-days: 30
name: Security & Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south1-a
  APP_DOMAIN: "http://myapp.awsaparna123.xyz"

permissions:
  contents: read
  security-events: write
  actions: write

jobs:
  # Frontend Security Scans (Parallel)
  frontend-trufflehog:
    name: 🐷 Frontend TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@v3.63.3
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          extra_args: --json --output trufflehog-frontend-report.json

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-trufflehog-report
          path: trufflehog-frontend-report.json
          retention-days: 30

  frontend-semgrep:
    name: 🔍 Frontend Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Semgrep Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript
          output: semgrep-frontend-results.json
          json: true

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-semgrep-report
          path: semgrep-frontend-results.json
          retention-days: 30

  frontend-snyk:
    name: 🛡️ Frontend Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}

      - name: Snyk Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test --json > snyk-frontend-report.json

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-snyk-report
          path: snyk-frontend-report.json
          retention-days: 30

  frontend-checkov:
    name: 🏗️ Frontend Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}

      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@v12
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets
          output: json
          output-file-path: checkov-frontend-report.json

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-checkov-report
          path: checkov-frontend-report.json
          retention-days: 30

  # Backend Security Scans (Parallel)
  backend-trufflehog:
    name: 🐷 Backend TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@v3.63.3
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          extra_args: --json --output trufflehog-backend-report.json

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-trufflehog-report
          path: trufflehog-backend-report.json
          retention-days: 30

  backend-semgrep:
    name: 🔍 Backend Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Semgrep Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript
          output: semgrep-backend-results.json
          json: true

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-semgrep-report
          path: semgrep-backend-results.json
          retention-days: 30

  backend-snyk:
    name: 🛡️ Backend Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Snyk Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test --json > snyk-backend-report.json

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-snyk-report
          path: snyk-backend-report.json
          retention-days: 30

  backend-checkov:
    name: 🏗️ Backend Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@v12
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets
          output: json
          output-file-path: checkov-backend-report.json

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-checkov-report
          path: checkov-backend-report.json
          retention-days: 30

  # DAST Scans (After Deploy)
  dast-zap:
    name: 🕷️ ZAP DAST Scan
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Health Check
        run: |
          timeout=300
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout waiting for deployment"
              exit 1
            fi
            if curl -s -f "${{ env.APP_DOMAIN }}/health" >/dev/null; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for service to be available..."
            sleep 10
          done

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        continue-on-error: true
        with:
          target: ${{ env.APP_DOMAIN }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'
          format: json
          allow_issue_writing: true

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: zap-report.json
          retention-days: 30

  dast-nuclei:
    name: 🎯 Nuclei DAST Scan
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Nuclei Health Check
        run: |
          timeout=300
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout waiting for deployment"
              exit 1
            fi
            if curl -s -f "${{ env.APP_DOMAIN }}/health" >/dev/null; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for service to be available..."
            sleep 10
          done

      - name: Nuclei Scan
        uses: projectdiscovery/nuclei-action@v2
        continue-on-error: true
        with:
          target: ${{ env.APP_DOMAIN }}
          templates: "cves,vulnerabilities,exposures,misconfiguration"
          severity: "critical,high,medium"
          output: "nuclei-report.json"
          json: true
          rate-limit: 150
          bulk-size: 25

      - name: Upload Nuclei Results
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-scan-report
          path: nuclei-report.json
          retention-days: 30

  # Build Jobs
  frontend-build:
    needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

  backend-build:
    needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

   # Deploy Job
 
      - name: Upload Deployment Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: |
            mongodb-logs.txt
            backend-logs.txt
            frontend-logs.txt
          retention-days: 7
    # Deploy to Kubernetes
  deploy:
    needs: [frontend-trivy, backend-trivy, frontend-build, backend-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          path: backend
          clean: true

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Install kubectl and gke-auth
        run: |
          gcloud components install kubectl gke-gcloud-auth-plugin
          gcloud --quiet auth configure-docker

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.CLUSTER_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Kubernetes Namespaces
        run: |
          kubectl create namespace mongodb --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace backend --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace frontend --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MongoDB
        run: |
          cd backend
          kubectl create secret generic mongodb-secret \
            --namespace mongodb \
            --from-literal=MONGO_URL="${{ secrets.MONGO_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8.yaml --namespace mongodb
          kubectl rollout status statefulset/mongodb --namespace mongodb --timeout=5m
          kubectl wait --for=condition=ready pod -l app=mongodb --namespace mongodb --timeout=5m

      - name: Deploy Backend
        run: |
          cd backend
          sed -i "s|image: .*imdb-clone-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ needs.backend-build.outputs.image_tag }}|g" k8.yaml
          kubectl apply -f k8.yaml --namespace backend
          kubectl rollout status deployment/backend-deployment --namespace backend --timeout=5m
          kubectl wait --for=condition=ready pod -l app=backend --namespace backend --timeout=5m

      - name: Deploy Frontend
        run: |
          cd backend
          sed -i "s|image: .*imdb-clone-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ needs.frontend-build.outputs.image_tag }}|g" k8.yaml
          kubectl apply -f k8.yaml --namespace frontend
          kubectl rollout status deployment/frontend-deployment --namespace frontend --timeout=5m
          kubectl wait --for=condition=ready pod -l app=frontend --namespace frontend --timeout=5m

      - name: Verify Deployment
        run: |
          echo "=== MongoDB Status ==="
          kubectl get all -n mongodb
          echo "=== Backend Status ==="
          kubectl get all -n backend
          echo "=== Frontend Status ==="
          kubectl get all -n frontend

  # Report Aggregation
  
  report-aggregation:
    needs:
      - frontend-trufflehog
      - frontend-semgrep
      - frontend-snyk
      - frontend-checkov
      - backend-trufflehog
      - backend-semgrep
      - backend-snyk
      - backend-checkov
      - dast-zap
      - dast-nuclei
      - frontend-build
      - backend-build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports
          pattern: '*-report'
          merge-multiple: true

      - name: Generate Security Dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Process all reports and generate statistics
            const stats = {
              frontend: { critical: 0, high: 0, medium: 0, low: 0 },
              backend: { critical: 0, high: 0, medium: 0, low: 0 },
              dast: { critical: 0, high: 0, medium: 0, low: 0 }
            };
            
            // Read and process all report files
            const reportPath = 'security-reports';
            const files = fs.readdirSync(reportPath);
            
            for (const file of files) {
              const content = fs.readFileSync(path.join(reportPath, file), 'utf8');
              try {
                const report = JSON.parse(content);
                const component = file.includes('frontend') ? 'frontend' 
                               : file.includes('backend') ? 'backend' 
                               : 'dast';
                               
                // Process findings based on tool-specific format
                if (file.includes('trufflehog')) {
                  report.forEach(finding => {
                    stats[component][finding.severity.toLowerCase()]++;
                  });
                } else if (file.includes('semgrep')) {
                  report.results.forEach(finding => {
                    stats[component][finding.extra.severity.toLowerCase()]++;
                  });
                } else if (file.includes('snyk')) {
                  report.vulnerabilities.forEach(vuln => {
                    stats[component][vuln.severity.toLowerCase()]++;
                  });
                } else if (file.includes('checkov')) {
                  report.results.failed_checks.forEach(check => {
                    stats[component][check.severity.toLowerCase()]++;
                  });
                } else if (file.includes('zap') || file.includes('nuclei')) {
                  report.findings.forEach(finding => {
                    stats[component][finding.severity.toLowerCase()]++;
                  });
                }
              } catch (error) {
                console.error(`Error processing ${file}: ${error.message}`);
              }
            }
            
            // Create markdown report
            let markdown = '# Security Scan Results\n\n';
            
            // Add timestamp
            markdown += `Report generated on: ${new Date().toISOString()}\n\n`;
            
            // Summary section
            markdown += '## Summary\n\n';
            markdown += '| Component | Critical | High | Medium | Low |\n';
            markdown += '|-----------|----------|------|---------|-----|\n';
            
            // Add component statistics
            for (const [component, counts] of Object.entries(stats)) {
              markdown += `| ${component} | ${counts.critical} | ${counts.high} | ${counts.medium} | ${counts.low} |\n`;
            }
            
            // Add total row
            const totals = {
              critical: Object.values(stats).reduce((sum, counts) => sum + counts.critical, 0),
              high: Object.values(stats).reduce((sum, counts) => sum + counts.high, 0),
              medium: Object.values(stats).reduce((sum, counts) => sum + counts.medium, 0),
              low: Object.values(stats).reduce((sum, counts) => sum + counts.low, 0)
            };
            markdown += `| **Total** | **${totals.critical}** | **${totals.high}** | **${totals.medium}** | **${totals.low}** |\n\n`;
            
            // Write the report
            fs.writeFileSync('security-dashboard.md', markdown);
            
            // Log statistics to console
            console.log('Security scan statistics:', stats);

      - name: Upload Security Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: security-dashboard
          path: security-dashboard.md
          retention-days: 30
