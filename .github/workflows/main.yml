name: Security & Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south1-a
  APP_DOMAIN: "http://myapp.awsaparna123.xyz"
  REPORT_DIR: security-reports

jobs:
  # Frontend Security Scans
  frontend-trufflehog:
    name: 🐷 Frontend TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: TruffleHog Scan
        run: |
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest \
            filesystem /pwd \
            --json > ${{ env.REPORT_DIR }}/frontend-trufflehog.json

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-trufflehog-report
          path: ${{ env.REPORT_DIR }}/frontend-trufflehog.json
          retention-days: 30

  frontend-semgrep:
    name: 🔍 Frontend Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Semgrep Scan
        run: |
          docker run --rm -v "${PWD}:/src" returntocorp/semgrep \
            semgrep scan --config=p/javascript \
            --json > ${{ env.REPORT_DIR }}/frontend-semgrep.json

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-semgrep-report
          path: ${{ env.REPORT_DIR }}/frontend-semgrep.json
          retention-days: 30

  frontend-snyk:
    name: 🛡️ Frontend Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Snyk Scan
        run: |
          npx snyk test --json > ${{ env.REPORT_DIR }}/frontend-snyk.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-snyk-report
          path: ${{ env.REPORT_DIR }}/frontend-snyk.json
          retention-days: 30

  frontend-checkov:
    name: 🏗️ Frontend Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Checkov Scan
        run: |
          docker run --rm -v $PWD:/tf bridgecrewio/checkov \
            --directory /tf \
            --framework dockerfile,kubernetes,secrets \
            --output json > ${{ env.REPORT_DIR }}/frontend-checkov.json

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-checkov-report
          path: ${{ env.REPORT_DIR }}/frontend-checkov.json
          retention-days: 30

  # Backend Security Scans
  backend-trufflehog:
    name: 🐷 Backend TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: TruffleHog Scan
        run: |
          docker run --rm -v "$PWD:/pwd" trufflesecurity/trufflehog:latest \
            filesystem /pwd \
            --json > ${{ env.REPORT_DIR }}/backend-trufflehog.json

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-trufflehog-report
          path: ${{ env.REPORT_DIR }}/backend-trufflehog.json
          retention-days: 30

  backend-semgrep:
    name: 🔍 Backend Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Semgrep Scan
        run: |
          docker run --rm -v "${PWD}:/src" returntocorp/semgrep \
            semgrep scan --config=p/javascript \
            --json > ${{ env.REPORT_DIR }}/backend-semgrep.json

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-semgrep-report
          path: ${{ env.REPORT_DIR }}/backend-semgrep.json
          retention-days: 30

  backend-snyk:
    name: 🛡️ Backend Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Snyk Scan
        run: |
          npx snyk test --json > ${{ env.REPORT_DIR }}/backend-snyk.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-snyk-report
          path: ${{ env.REPORT_DIR }}/backend-snyk.json
          retention-days: 30

  backend-checkov:
    name: 🏗️ Backend Checkov
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Checkov Scan
        run: |
          docker run --rm -v $PWD:/tf bridgecrewio/checkov \
            --directory /tf \
            --framework dockerfile,kubernetes,secrets \
            --output json > ${{ env.REPORT_DIR }}/backend-checkov.json

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-checkov-report
          path: ${{ env.REPORT_DIR }}/backend-checkov.json
          retention-days: 30

  # DAST Scans
  dast-zap:
    name: 🕷️ DAST ZAP Scan
    runs-on: ubuntu-latest
    steps:
      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Health Check
        run: |
          timeout=300
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout waiting for deployment"
              exit 1
            fi
            if curl -s -f "${{ env.APP_DOMAIN }}/health" >/dev/null; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for service to be available..."
            sleep 10
          done

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ env.APP_DOMAIN }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -I'
          format: json
          output: ${{ env.REPORT_DIR }}/zap-report.json

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: ${{ env.REPORT_DIR }}/zap-report.json
          retention-days: 30

  dast-nuclei:
    name: 🎯 DAST Nuclei Scan
    runs-on: ubuntu-latest
    steps:
      - name: Create Reports Directory
        run: mkdir -p ${{ env.REPORT_DIR }}

      - name: Health Check
        run: |
          timeout=300
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -gt $timeout ]; then
              echo "Timeout waiting for deployment"
              exit 1
            fi
            if curl -s -f "${{ env.APP_DOMAIN }}/health" >/dev/null; then
              echo "Service is up!"
              break
            fi
            echo "Waiting for service to be available..."
            sleep 10
          done

      - name: Run Nuclei Scan
        run: |
          docker run --rm projectdiscovery/nuclei \
            -target ${{ env.APP_DOMAIN }} \
            -severity critical,high,medium \
            -json -o ${{ env.REPORT_DIR }}/nuclei-report.json

      - name: Upload Nuclei Results
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-report
          path: ${{ env.REPORT_DIR }}/nuclei-report.json
          retention-days: 30

  # Build and Deploy (Frontend and Backend)
  frontend-build:
    needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

  backend-build:
    needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

  deploy:
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v4
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          path: backend
          clean: true

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Install kubectl and gke-auth
        run: |
          gcloud components install kubectl gke-gcloud-auth-plugin
          gcloud --quiet auth configure-docker

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.CLUSTER_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create Kubernetes Namespaces
        run: |
          kubectl create namespace mongodb --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace backend --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace frontend --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MongoDB
        run: |
          cd backend
          kubectl create secret generic mongodb-secret \
            --namespace mongodb \
            --from-literal=MONGO_URL="${{ secrets.MONGO_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/mongodb.yaml --namespace mongodb
          kubectl rollout status statefulset/mongodb --namespace mongodb --timeout=5m
          kubectl wait --for=condition=ready pod -l app=mongodb --namespace mongodb --timeout=5m

      - name: Deploy Backend
        run: |
          cd backend
          kubectl create secret generic backend-secrets \
            --namespace backend \
            --from-literal=MONGO_URL="${{ secrets.MONGO_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          sed -i "s|image: .*imdb-clone-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}|g" k8s/backend.yaml
          kubectl apply -f k8s/backend.yaml --namespace backend
          kubectl rollout status deployment/backend-deployment --namespace backend --timeout=5m
          kubectl wait --for=condition=ready pod -l app=backend --namespace backend --timeout=5m

      - name: Deploy Frontend
        run: |
          cd backend
          kubectl create configmap frontend-config \
            --namespace frontend \
            --from-literal=API_URL="http://backend-service.backend:8080" \
            --dry-run=client -o yaml | kubectl apply -f -
          sed -i "s|image: .*imdb-clone-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}|g" k8s/frontend.yaml
          kubectl apply -f k8s/frontend.yaml --namespace frontend
          kubectl rollout status deployment/frontend-deployment --namespace frontend --timeout=5m
          kubectl wait --for=condition=ready pod -l app=frontend --namespace frontend --timeout=5m

      - name: Verify Deployment
        run: |
          echo "=== MongoDB Status ==="
          kubectl get all -n mongodb
          echo "=== Backend Status ==="
          kubectl get all -n backend
          echo "=== Frontend Status ==="
          kubectl get all -n frontend

      - name: Download All Scan Reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports

      - name: Generate Combined Report
        run: |
          echo "# Security Scan Reports Summary" > scan-summary.md
          echo "## Frontend Scans" >> scan-summary.md
          echo "* TruffleHog Report: \`frontend-trufflehog-report/frontend-trufflehog.json\`" >> scan-summary.md
          echo "* Semgrep Report: \`frontend-semgrep-report/frontend-semgrep.json\`" >> scan-summary.md
          echo "* Snyk Report: \`frontend-snyk-report/frontend-snyk.json\`" >> scan-summary.md
          echo "* Checkov Report: \`frontend-checkov-report/frontend-checkov.json\`" >> scan-summary.md
          echo "## Backend Scans" >> scan-summary.md
          echo "* TruffleHog Report: \`backend-trufflehog-report/backend-trufflehog.json\`" >> scan-summary.md
          echo "* Semgrep Report: \`backend-semgrep-report/backend-semgrep.json\`" >> scan-summary.md
          echo "* Snyk Report: \`backend-snyk-report/backend-snyk.json\`" >> scan-summary.md
          echo "* Checkov Report: \`backend-checkov-report/backend-checkov.json\`" >> scan-summary.md
          echo "## DAST Scans" >> scan-summary.md
          echo "* ZAP Report: \`zap-report/zap-report.json\`" >> scan-summary.md
          echo "* Nuclei Report: \`nuclei-report/nuclei-report.json\`" >> scan-summary.md

      - name: Upload Combined Report
        uses: actions/upload-artifact@v4
        with:
          name: all-security-reports
          path: |
            all-reports/
            scan-summary.md
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          rm -rf all-reports/
          rm -f scan-summary.md
