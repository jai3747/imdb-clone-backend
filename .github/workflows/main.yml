# # # # # # # name: Security & Build Pipeline

# # # # # # # on:
# # # # # # #   workflow_dispatch:
# # # # # # #   push:
# # # # # # #     branches: [main]
# # # # # # #   pull_request:
# # # # # # #     branches: [main]

# # # # # # # env:
# # # # # # #   NODE_OPTIONS: --openssl-legacy-provider

# # # # # # # jobs:
# # # # # # #   frontend-security:
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/MY-FRONTEND
# # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # #         with:
# # # # # # #           node-version: '18'
# # # # # # #           cache: 'npm'
      
# # # # # # #       - name: SAC (Snyk) Scan
# # # # # # #         run: |
# # # # # # #           npm install
# # # # # # #           npm install -g snyk
# # # # # # #           snyk test --json > frontend-sac.json || true
# # # # # # #           echo "### Frontend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' frontend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #         env:
# # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # #       - name: Frontend TruffleHog
# # # # # # #         run: |
# # # # # # #           docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
# # # # # # #             filesystem /pwd --json > frontend-secrets.json || true
# # # # # # #           echo "### Frontend Secrets Found" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #           jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' frontend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

# # # # # # #   backend-security:
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/MY-BACKEND
# # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # #         with:
# # # # # # #           node-version: '18'
# # # # # # #           cache: 'npm'
      
# # # # # # #       - name: SAC (Snyk) Scan
# # # # # # #         run: |
# # # # # # #           npm install
# # # # # # #           npm install -g snyk
# # # # # # #           snyk test --json > backend-sac.json || true
# # # # # # #           echo "### Backend Vulnerabilities" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #           jq -r '.vulnerabilities[] | "- " + .title + " (Severity: " + .severity + ")"' backend-sac.json >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found"
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #         env:
# # # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # # # #       - name: Backend TruffleHog
# # # # # # #         run: |
# # # # # # #           docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
# # # # # # #             filesystem /pwd --json > backend-secrets.json || true
# # # # # # #           echo "### Backend Secrets Found" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
# # # # # # #           jq -r '.[] | "- Found in: " + .file + " (Type: " + .type + ")"' backend-secrets.json >> $GITHUB_STEP_SUMMARY || echo "No secrets found"
# # # # # # #           echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

# # # # # # #   frontend-build:
# # # # # # #     needs: frontend-security
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/imdb-clone-frontend
# # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # #         with:
# # # # # # #           node-version: '18'
# # # # # # #           cache: 'npm'
# # # # # # #       - name: Build Frontend
# # # # # # #         run: |
# # # # # # #           npm install react@18 react-dom@18 react-scripts@5.0.1 --save
# # # # # # #           npm install
# # # # # # #           if ! grep -q '"build"' package.json; then
# # # # # # #             npm pkg set scripts.build="react-scripts build"
# # # # # # #           fi
# # # # # # #           npm run build
# # # # # # #         env:
# # # # # # #           CI: false

# # # # # # #   backend-build:
# # # # # # #     needs: backend-security
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     steps:
# # # # # # #       - uses: actions/checkout@v4.1.1
# # # # # # #         with:
# # # # # # #           repository: jai3747/imdb-clone-backend
# # # # # # #       - uses: actions/setup-node@v4.0.2
# # # # # # #         with:
# # # # # # #           node-version: '18'
# # # # # # #           cache: 'npm'
# # # # # # #       - name: Initialize TypeScript
# # # # # # #         run: |
# # # # # # #           npm init -y
# # # # # # #           npm install typescript @types/node @types/express --save-dev
# # # # # # #           npx tsc --init
# # # # # # #       - name: Create TypeScript Config
# # # # # # #         run: |
# # # # # # #           echo '{
# # # # # # #             "compilerOptions": {
# # # # # # #               "target": "es2020",
# # # # # # #               "module": "commonjs",
# # # # # # #               "outDir": "./dist",
# # # # # # #               "rootDir": "./src",
# # # # # # #               "strict": true,
# # # # # # #               "esModuleInterop": true
# # # # # # #             },
# # # # # # #             "include": ["src/**/*"],
# # # # # # #             "exclude": ["node_modules"]
# # # # # # #           }' > tsconfig.json
# # # # # # #       - name: Ensure Source Directory
# # # # # # #         run: |
# # # # # # #           mkdir -p src
# # # # # # #           if [ ! -f src/index.ts ]; then
# # # # # # #             echo 'console.log("Backend running");' > src/index.ts
# # # # # # #           fi
# # # # # # #       - name: Build Backend
# # # # # # #         run: |
# # # # # # #           npm pkg set scripts.build="tsc"
# # # # # # #           npm install
# # # # # # #           npm run build

# # # # # # #   report:
# # # # # # #     needs: [frontend-security, backend-security, frontend-build, backend-build]
# # # # # # #     runs-on: ubuntu-latest
# # # # # # #     if: always()
# # # # # # #     steps:
# # # # # # #       - name: Generate Final Report
# # # # # # #         run: |
# # # # # # #           echo "# Pipeline Security Report" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "## Build Status" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Frontend Build: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Backend Build: ${{ needs.backend-build.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "## Security Summary" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "### Frontend" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Security Scan Status: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "### Backend" >> $GITHUB_STEP_SUMMARY
# # # # # # #           echo "- Security Scan Status: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY

# # # # # # # permissions:
# # # # # # #   contents: read
# # # # # # #   security-events: write


# # # # # # name: IMDB Clone CI/CD Pipeline

# # # # # # on:
# # # # # #   push:
# # # # # #     branches: [ main ]
# # # # # #   pull_request:
# # # # # #     branches: [ main ]

# # # # # # env:
# # # # # #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# # # # # #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# # # # # #   MONGO_URL: ${{ secrets.MONGO_URL }}
# # # # # #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# # # # # #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # # # # #   GH_PAT: ${{ secrets.GH_PAT }}

# # # # # # jobs:
# # # # # #   security-scan-frontend:
# # # # # #     name: Security Scan Frontend
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - name: Checkout code
# # # # # #         uses: actions/checkout@v3

# # # # # #       # Stage 1: Trufflehog - Secret Scanner
# # # # # #       - name: TruffleHog OSS
# # # # # #         uses: trufflesecurity/trufflehog@main
# # # # # #         continue-on-error: true
# # # # # #         with:
# # # # # #           path: ./imdb-clone-frontend
# # # # # #           base: ${{ github.event.before }}
# # # # # #           head: ${{ github.sha }}

# # # # # #       # Stage 2: Semgrep - SAST Scanner
# # # # # #       - name: Semgrep Scan
# # # # # #         uses: semgrep/semgrep-action@v1
# # # # # #         continue-on-error: true
# # # # # #         with:
# # # # # #           config: >-
# # # # # #             p/security-audit
# # # # # #             p/javascript
# # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # #           publishDeployment: 1

# # # # # #       # Stage 3: Snyk - SCA Scanner
# # # # # #       - name: Run Snyk
# # # # # #         uses: snyk/actions/node@master
# # # # # #         continue-on-error: true
# # # # # #         env:
# # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # # # # #         with:
# # # # # #           command: monitor
# # # # # #           args: --all-projects

# # # # # #   security-scan-backend:
# # # # # #     name: Security Scan Backend
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - name: Checkout code
# # # # # #         uses: actions/checkout@v3

# # # # # #       # Stage 1: Trufflehog
# # # # # #       - name: TruffleHog OSS
# # # # # #         uses: trufflesecurity/trufflehog@main
# # # # # #         continue-on-error: true
# # # # # #         with:
# # # # # #           path: ./imdb-clone-backend
# # # # # #           base: ${{ github.event.before }}
# # # # # #           head: ${{ github.sha }}

# # # # # #       # Stage 2: Semgrep
# # # # # #       - name: Semgrep Scan
# # # # # #         uses: semgrep/semgrep-action@v1
# # # # # #         continue-on-error: true
# # # # # #         with:
# # # # # #           config: >-
# # # # # #             p/security-audit
# # # # # #             p/javascript
# # # # # #           publishToken: ${{ secrets.SEMGREP_TOKEN }}
# # # # # #           publishDeployment: 1

# # # # # #       # Stage 3: Snyk
# # # # # #       - name: Run Snyk
# # # # # #         uses: snyk/actions/node@master
# # # # # #         continue-on-error: true
# # # # # #         env:
# # # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # # # # #         with:
# # # # # #           command: monitor
# # # # # #           args: --all-projects

# # # # # #   build-and-push:
# # # # # #     name: Build and Push Docker Images
# # # # # #     needs: [security-scan-frontend, security-scan-backend]
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - name: Checkout code
# # # # # #         uses: actions/checkout@v3

# # # # # #       - name: Login to DockerHub
# # # # # #         uses: docker/login-action@v2
# # # # # #         with:
# # # # # #           username: ${{ secrets.DOCKER_USERNAME }}
# # # # # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # # # # #       # Stage 4: Build and Push Frontend
# # # # # #       - name: Build and Push Frontend
# # # # # #         uses: docker/build-push-action@v4
# # # # # #         with:
# # # # # #           context: ./imdb-clone-frontend
# # # # # #           push: true
# # # # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}

# # # # # #       # Build and Push Backend
# # # # # #       - name: Build and Push Backend
# # # # # #         uses: docker/build-push-action@v4
# # # # # #         with:
# # # # # #           context: ./imdb-clone-backend
# # # # # #           push: true
# # # # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

# # # # # #   deploy:
# # # # # #     name: Deploy to Kubernetes
# # # # # #     needs: build-and-push
# # # # # #     runs-on: ubuntu-latest
# # # # # #     steps:
# # # # # #       - name: Checkout code
# # # # # #         uses: actions/checkout@v3

# # # # # #       # Stage 5: Deploy to Kubernetes
# # # # # #       - name: Set up kubectl
# # # # # #         uses: google-github-actions/setup-gcloud@v0
# # # # # #         with:
# # # # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
# # # # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# # # # # #       - name: Configure kubectl
# # # # # #         run: |
# # # # # #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

# # # # # #       - name: Update kubernetes deployment
# # # # # #         run: |
# # # # # #           cd imdb-clone-backend
# # # # # #           # Update image tags in k8s.yaml
# # # # # #           sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|' k8s.yaml
# # # # # #           kubectl apply -f k8s.yaml
# # # # # name: IMDB Clone CI/CD Pipeline

# # # # # on:
# # # # #   push:
# # # # #     branches: [ main ]
# # # # #   pull_request:
# # # # #     branches: [ main ]

# # # # # env:
# # # # #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# # # # #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# # # # #   MONGO_URL: ${{ secrets.MONGO_URL }}
# # # # #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# # # # #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # # # #   GH_PAT: ${{ secrets.GH_PAT }}

# # # # # jobs:
# # # # #   # Frontend Pipeline
# # # # #   frontend-security:
# # # # #     name: Frontend Security Checks
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - name: Checkout frontend code
# # # # #         uses: actions/checkout@v3
# # # # #         with:
# # # # #           repository: your-username/imdb-clone-frontend
# # # # #           token: ${{ secrets.GH_PAT }}

# # # # #       - name: TruffleHog Scan
# # # # #         uses: trufflesecurity/trufflehog@main
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           path: .
# # # # #           base: ${{ github.event.before }}
# # # # #           head: ${{ github.sha }}

# # # # #       - name: SAST Scan (Semgrep)
# # # # #         uses: semgrep/semgrep-action@v1
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           config: p/javascript

# # # # #       - name: SCA Scan (Snyk)
# # # # #         uses: snyk/actions/node@master
# # # # #         continue-on-error: true
# # # # #         env:
# # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # #       - name: Trivy Image Scan
# # # # #         uses: aquasecurity/trivy-action@master
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           scan-type: 'fs'
# # # # #           scan-ref: '.'

# # # # #       - name: IAC Security Scan (Checkov)
# # # # #         uses: bridgecrewio/checkov-action@master
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           directory: .
# # # # #           framework: dockerfile,kubernetes

# # # # #   # Backend Pipeline
# # # # #   backend-security:
# # # # #     name: Backend Security Checks
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - name: Checkout backend code
# # # # #         uses: actions/checkout@v3
# # # # #         with:
# # # # #           repository: your-username/imdb-clone-backend
# # # # #           token: ${{ secrets.GH_PAT }}

# # # # #       - name: TruffleHog Scan
# # # # #         uses: trufflesecurity/trufflehog@main
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           path: .
# # # # #           base: ${{ github.event.before }}
# # # # #           head: ${{ github.sha }}

# # # # #       - name: SAST Scan (Semgrep)
# # # # #         uses: semgrep/semgrep-action@v1
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           config: p/javascript

# # # # #       - name: SCA Scan (Snyk)
# # # # #         uses: snyk/actions/node@master
# # # # #         continue-on-error: true
# # # # #         env:
# # # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # # #       - name: Trivy Image Scan
# # # # #         uses: aquasecurity/trivy-action@master
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           scan-type: 'fs'
# # # # #           scan-ref: '.'

# # # # #       - name: IAC Security Scan (Checkov)
# # # # #         uses: bridgecrewio/checkov-action@master
# # # # #         continue-on-error: true
# # # # #         with:
# # # # #           directory: .
# # # # #           framework: dockerfile,kubernetes

# # # # #   # Build and Push Docker Images
# # # # #   build-images:
# # # # #     needs: [frontend-security, backend-security]
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - name: Checkout Code
# # # # #         uses: actions/checkout@v3

# # # # #       - name: Login to DockerHub
# # # # #         uses: docker/login-action@v2
# # # # #         with:
# # # # #           username: ${{ secrets.DOCKER_USERNAME }}
# # # # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # # # #       - name: Build & Push Frontend Image
# # # # #         uses: docker/build-push-action@v4
# # # # #         with:
# # # # #           context: ./imdb-clone-frontend
# # # # #           push: true
# # # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}

# # # # #       - name: Build & Push Backend Image
# # # # #         uses: docker/build-push-action@v4
# # # # #         with:
# # # # #           context: ./imdb-clone-backend
# # # # #           push: true
# # # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

# # # # #   # Deploy to Kubernetes
# # # # #   deploy:
# # # # #     needs: build-images
# # # # #     runs-on: ubuntu-latest
# # # # #     steps:
# # # # #       - name: Checkout Code
# # # # #         uses: actions/checkout@v3

# # # # #       - name: Setup GCloud CLI
# # # # #         uses: google-github-actions/setup-gcloud@v0
# # # # #         with:
# # # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
# # # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# # # # #       - name: Get GKE Credentials
# # # # #         run: |
# # # # #           gcloud container clusters get-credentials your-cluster-name --zone your-zone --project ${{ secrets.GCP_PROJECT_ID }}

# # # # #       - name: Deploy to K8s
# # # # #         run: |
# # # # #           cd imdb-clone-backend
# # # # #           # Update image tags in k8s.yaml
# # # # #           sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|' k8s.yaml
# # # # #           kubectl apply -f k8s.yaml
# # # # name: IMDB Clone CI/CD Pipeline

# # # # on:
# # # #   push:
# # # #     branches: [ main ]
# # # #   pull_request:
# # # #     branches: [ main ]

# # # # env:
# # # #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# # # #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# # # #   MONGO_URL: ${{ secrets.MONGO_URL }}
# # # #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# # # #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # # #   GH_PAT: ${{ secrets.GH_PAT }}

# # # # jobs:
# # # #   # Frontend Pipeline
# # # #   frontend-security:
# # # #     name: Frontend Security Checks
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Clean workspace
# # # #         run: |
# # # #           rm -rf *
# # # #           rm -rf .git

# # # #       - name: Checkout frontend code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #           fetch-depth: 0

# # # #       - name: TruffleHog Scan
# # # #         id: trufflehog
# # # #         uses: trufflesecurity/trufflehog@main
# # # #         continue-on-error: true
# # # #         with:
# # # #           path: .
# # # #           base: ${{ github.event.before }}
# # # #           head: ${{ github.sha }}
          
# # # #       - name: Report TruffleHog Issues
# # # #         if: steps.trufflehog.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ TruffleHog found potential secrets. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #       - name: SAST Scan (Semgrep)
# # # #         id: semgrep
# # # #         uses: semgrep/semgrep-action@v1
# # # #         continue-on-error: true
# # # #         with:
# # # #           config: p/javascript
          
# # # #       - name: Report Semgrep Issues
# # # #         if: steps.semgrep.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ Semgrep found code quality/security issues. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #       - name: SCA Scan (Snyk)
# # # #         id: snyk
# # # #         uses: snyk/actions/node@master
# # # #         continue-on-error: true
# # # #         env:
# # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
# # # #       - name: Report Snyk Issues
# # # #         if: steps.snyk.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ Snyk found dependency vulnerabilities. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #       - name: Trivy Image Scan
# # # #         id: trivy
# # # #         uses: aquasecurity/trivy-action@master
# # # #         continue-on-error: true
# # # #         with:
# # # #           scan-type: 'fs'
# # # #           scan-ref: '.'
          
# # # #       - name: Report Trivy Issues
# # # #         if: steps.trivy.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ Trivy found container security issues. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #   # Backend Pipeline
# # # #   backend-security:
# # # #     name: Backend Security Checks
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Clean workspace
# # # #         run: |
# # # #           rm -rf *
# # # #           rm -rf .git

# # # #       - name: Checkout backend code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #           fetch-depth: 0

# # # #       - name: TruffleHog Scan
# # # #         id: trufflehog
# # # #         uses: trufflesecurity/trufflehog@main
# # # #         continue-on-error: true
# # # #         with:
# # # #           path: .
# # # #           base: ${{ github.event.before }}
# # # #           head: ${{ github.sha }}
          
# # # #       - name: Report TruffleHog Issues
# # # #         if: steps.trufflehog.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ TruffleHog found potential secrets. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #       - name: SAST Scan (Semgrep)
# # # #         id: semgrep
# # # #         uses: semgrep/semgrep-action@v1
# # # #         continue-on-error: true
# # # #         with:
# # # #           config: p/javascript
          
# # # #       - name: Report Semgrep Issues
# # # #         if: steps.semgrep.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ Semgrep found code quality/security issues. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #       - name: SCA Scan (Snyk)
# # # #         id: snyk
# # # #         uses: snyk/actions/node@master
# # # #         continue-on-error: true
# # # #         env:
# # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
# # # #       - name: Report Snyk Issues
# # # #         if: steps.snyk.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ Snyk found dependency vulnerabilities. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #       - name: Trivy Image Scan
# # # #         id: trivy
# # # #         uses: aquasecurity/trivy-action@master
# # # #         continue-on-error: true
# # # #         with:
# # # #           scan-type: 'fs'
# # # #           scan-ref: '.'
          
# # # #       - name: Report Trivy Issues
# # # #         if: steps.trivy.outcome == 'failure'
# # # #         run: |
# # # #           echo "⚠️ Trivy found container security issues. Please review the scan results."
# # # #           echo "The pipeline will continue, but these should be addressed."

# # # #   # Build and Push Docker Images
# # # #   build-images:
# # # #     needs: [frontend-security, backend-security]
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Clean workspace
# # # #         run: |
# # # #           rm -rf *
# # # #           rm -rf .git

# # # #       - name: Checkout Frontend
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           path: ./frontend
# # # #           token: ${{ secrets.GH_PAT }}

# # # #       - name: Checkout Backend
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           path: ./backend
# # # #           token: ${{ secrets.GH_PAT }}

# # # #       - name: Login to DockerHub
# # # #         uses: docker/login-action@v2
# # # #         with:
# # # #           username: ${{ secrets.DOCKER_USERNAME }}
# # # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # # #       - name: Build & Push Frontend Image
# # # #         uses: docker/build-push-action@v4
# # # #         with:
# # # #           context: ./frontend
# # # #           push: true
# # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}

# # # #       - name: Build & Push Backend Image
# # # #         uses: docker/build-push-action@v4
# # # #         with:
# # # #           context: ./backend
# # # #           push: true
# # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

# # # #   # Deploy to Kubernetes
# # # #   deploy:
# # # #     needs: build-images
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Clean workspace
# # # #         run: |
# # # #           rm -rf *
# # # #           rm -rf .git

# # # #       - name: Checkout Backend Code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}

# # # #       - name: Setup GCloud CLI
# # # #         uses: google-github-actions/setup-gcloud@v0
# # # #         with:
# # # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
# # # #           project_id: ${{ secrets.GCP_PROJECT_ID }}

# # # #       - name: Get GKE Credentials
# # # #         run: |
# # # #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

# # # #       - name: Deploy to K8s
# # # #         run: |
# # # #           # Update image tags in k8s.yaml
# # # #           sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|' k8s.yaml
# # # #           kubectl apply -f k8s.yaml
# # # name: IMDB Clone CI/CD Pipeline

# # # on:
# # #   push:
# # #     branches: [ main ]
# # #   pull_request:
# # #     branches: [ main ]

# # # env:
# # #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# # #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# # #   MONGO_URL: ${{ secrets.MONGO_URL }}
# # #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# # #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # #   GH_PAT: ${{ secrets.GH_PAT }}

# # # jobs:
# # #   # Frontend Security Checks
# # #   frontend-trufflehog:
# # #     name: Frontend TruffleHog
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout frontend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: TruffleHog Scan
# # #         uses: trufflesecurity/trufflehog@main
# # #         continue-on-error: true
# # #         with:
# # #           path: .
# # #           base: ${{ github.event.before }}
# # #           head: ${{ github.sha }}

# # #   frontend-semgrep:
# # #     name: Frontend Semgrep
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout frontend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: SAST Scan
# # #         uses: semgrep/semgrep-action@v1
# # #         continue-on-error: true
# # #         with:
# # #           config: p/javascript

# # #   frontend-snyk:
# # #     name: Frontend Snyk
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout frontend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: SCA Scan
# # #         uses: snyk/actions/node@master
# # #         continue-on-error: true
# # #         env:
# # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # #   frontend-trivy:
# # #     name: Frontend Trivy
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout frontend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: Scan
# # #         uses: aquasecurity/trivy-action@master
# # #         continue-on-error: true
# # #         with:
# # #           scan-type: 'fs'
# # #           scan-ref: '.'

# # #   # Backend Security Checks
# # #   backend-trufflehog:
# # #     name: Backend TruffleHog
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout backend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: TruffleHog Scan
# # #         uses: trufflesecurity/trufflehog@main
# # #         continue-on-error: true
# # #         with:
# # #           path: .
# # #           base: ${{ github.event.before }}
# # #           head: ${{ github.sha }}

# # #   backend-semgrep:
# # #     name: Backend Semgrep
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout backend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: SAST Scan
# # #         uses: semgrep/semgrep-action@v1
# # #         continue-on-error: true
# # #         with:
# # #           config: p/javascript

# # #   backend-snyk:
# # #     name: Backend Snyk
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout backend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: SCA Scan
# # #         uses: snyk/actions/node@master
# # #         continue-on-error: true
# # #         env:
# # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # #   backend-trivy:
# # #     name: Backend Trivy
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout backend code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: Scan
# # #         uses: aquasecurity/trivy-action@master
# # #         continue-on-error: true
# # #         with:
# # #           scan-type: 'fs'
# # #           scan-ref: '.'

# # #   # Build and Push Docker Images
# # #   build-images:
# # #     needs: 
# # #       - frontend-trufflehog
# # #       - frontend-semgrep
# # #       - frontend-snyk
# # #       - frontend-trivy
# # #       - backend-trufflehog
# # #       - backend-semgrep
# # #       - backend-snyk
# # #       - backend-trivy
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout Frontend
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           path: ./frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: Checkout Backend
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           path: ./backend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: Login to DockerHub
# # #         uses: docker/login-action@v2
# # #         with:
# # #           username: ${{ secrets.DOCKER_USERNAME }}
# # #           password: ${{ secrets.DOCKER_PASSWORD }}
# # #       - name: Build & Push Frontend Image
# # #         uses: docker/build-push-action@v4
# # #         with:
# # #           context: ./frontend
# # #           push: true
# # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}
# # #       - name: Build & Push Backend Image
# # #         uses: docker/build-push-action@v4
# # #         with:
# # #           context: ./backend
# # #           push: true
# # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

# # #   # Deploy to Kubernetes
# # #   deploy:
# # #     needs: build-images
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: rm -rf * .git
# # #       - name: Checkout Backend Code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #       - name: Setup GCloud CLI
# # #         uses: google-github-actions/setup-gcloud@v0
# # #         with:
# # #           service_account_key: ${{ secrets.GCP_SA_KEY }}
# # #           project_id: ${{ secrets.GCP_PROJECT_ID }}
# # #       - name: Get GKE Credentials
# # #         run: |
# # #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}
# # #       - name: Deploy to K8s
# # #         run: |
# # #           sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|' k8.yaml
# # #           kubectl apply -f k8.yaml
# # name: IMDB Clone CI/CD Pipeline

# # on:
# #   push:
# #     branches: [ main ]
# #   pull_request:
# #     branches: [ main ]

# # env:
# #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# #   MONGO_URL: ${{ secrets.MONGO_URL }}
# #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# #   GH_PAT: ${{ secrets.GH_PAT }}

# # jobs:
# #   # Frontend Security Checks
# #   frontend-checks:
# #     name: Frontend Security Checks
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: rm -rf * .git
        
# #       - name: Checkout frontend code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           token: ${{ secrets.GH_PAT }}
          
# #       - name: TruffleHog Scan
# #         uses: trufflesecurity/trufflehog@main
# #         continue-on-error: true
# #         with:
# #           path: .
# #           base: ${{ github.event.before }}
# #           head: ${{ github.sha }}
          
# #       - name: SAST Scan
# #         uses: semgrep/semgrep-action@v1
# #         continue-on-error: true
# #         with:
# #           config: p/javascript
          
# #       - name: SCA Scan
# #         uses: snyk/actions/node@master
# #         continue-on-error: true
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# #   # Backend Security Checks
# #   backend-checks:
# #     name: Backend Security Checks
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: rm -rf * .git
        
# #       - name: Checkout backend code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
          
# #       - name: TruffleHog Scan
# #         uses: trufflesecurity/trufflehog@main
# #         continue-on-error: true
# #         with:
# #           path: .
# #           base: ${{ github.event.before }}
# #           head: ${{ github.sha }}
          
# #       - name: SAST Scan
# #         uses: semgrep/semgrep-action@v1
# #         continue-on-error: true
# #         with:
# #           config: p/javascript
          
# #       - name: SCA Scan
# #         uses: snyk/actions/node@master
# #         continue-on-error: true
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# #   # Build and Scan Docker Images
# #   build-and-scan:
# #     needs: [frontend-checks, backend-checks]
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: rm -rf * .git
        
# #       - name: Checkout Frontend
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           path: ./frontend
# #           token: ${{ secrets.GH_PAT }}
          
# #       - name: Checkout Backend
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           path: ./backend
# #           token: ${{ secrets.GH_PAT }}
          
# #       - name: Login to DockerHub
# #         uses: docker/login-action@v2
# #         with:
# #           username: ${{ secrets.DOCKER_USERNAME }}
# #           password: ${{ secrets.DOCKER_PASSWORD }}
          
# #       # Build Frontend
# #       - name: Build Frontend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: ./frontend
# #           push: false
# #           load: true
# #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}
          
# #       # Scan Frontend Image
# #       - name: Trivy Frontend Scan
# #         uses: aquasecurity/trivy-action@master
# #         continue-on-error: true
# #         with:
# #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}'
# #           format: 'table'
# #           exit-code: '1'
# #           ignore-unfixed: true
# #           severity: 'CRITICAL,HIGH'
          
# #       # Push Frontend if scan passes
# #       - name: Push Frontend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: ./frontend
# #           push: true
# #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}
          
# #       # Build Backend
# #       - name: Build Backend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: ./backend
# #           push: false
# #           load: true
# #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}
          
# #       # Scan Backend Image
# #       - name: Trivy Backend Scan
# #         uses: aquasecurity/trivy-action@master
# #         continue-on-error: true
# #         with:
# #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}'
# #           format: 'table'
# #           exit-code: '1'
# #           ignore-unfixed: true
# #           severity: 'CRITICAL,HIGH'
          
# #       # Push Backend if scan passes
# #       - name: Push Backend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: ./backend
# #           push: true
# #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

# #   # Deploy to Kubernetes
# #   deploy:
# #     needs: build-and-scan
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: rm -rf * .git
        
# #       - name: Checkout Backend Code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}

# #       # Updated GCP Authentication
# #       - name: Google Auth
# #         id: auth
# #         uses: google-github-actions/auth@v1
# #         with:
# #           credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
# #       - name: Set up Cloud SDK
# #         uses: google-github-actions/setup-gcloud@v1
        
# #       - name: Install gke-gcloud-auth-plugin
# #         run: |
# #           gcloud components install gke-gcloud-auth-plugin
          
# #       - name: Get GKE Credentials
# #         run: |
# #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}
          
# #       - name: Deploy to K8s
# #         run: |
# #           sed -i 's|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|' k8.yaml
# #           kubectl apply -f k8.yaml --validate=true
# name: IMDB Clone CI/CD Pipeline 

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
#   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#   MONGO_URL: ${{ secrets.MONGO_URL }}
#   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
#   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#   GH_PAT: ${{ secrets.GH_PAT }}

# jobs:
#   # Frontend Security Scans
#   frontend-security:
#     name: Frontend Security Scans
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}
          
#       - name: TruffleHog Scan
#         uses: trufflesecurity/trufflehog@main
#         continue-on-error: true
#         with:
#           path: .
#           base: ${{ github.event.before }}
#           head: ${{ github.sha }}

#       - name: SAST Scan
#         uses: semgrep/semgrep-action@v1
#         continue-on-error: true
#         with:
#           config: p/javascript
          
#       - name: Snyk Scan
#         uses: snyk/actions/node@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
#       - name: Checkov IaC Scan
#         uses: bridgecrewio/checkov-action@master
#         continue-on-error: true
#         with:
#           directory: .
#           framework: dockerfile,kubernetes,secrets

#   # Backend Security Scans  
#   backend-security:
#     name: Backend Security Scans
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}
          
#       - name: TruffleHog Scan
#         uses: trufflesecurity/trufflehog@main
#         continue-on-error: true
#         with:
#           path: .
#           base: ${{ github.event.before }}
#           head: ${{ github.sha }}

#       - name: SAST Scan  
#         uses: semgrep/semgrep-action@v1
#         continue-on-error: true
#         with:
#           config: p/javascript
          
#       - name: Snyk Scan
#         uses: snyk/actions/node@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
#       - name: Checkov IaC Scan
#         uses: bridgecrewio/checkov-action@master
#         continue-on-error: true
#         with:
#           directory: .
#           framework: dockerfile,kubernetes,secrets

#   # Frontend Docker Build and Scan
#   frontend-build:
#     needs: [frontend-security]
#     runs-on: ubuntu-latest
#     outputs:
#       image_tag: ${{ steps.get_tag.outputs.tag }}
#     steps:
#       - name: Generate unique tag
#         id: get_tag
#         run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

#       - name: Checkout Frontend
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build Frontend Image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: false
#           load: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ steps.get_tag.outputs.tag }}

#       - name: Trivy Frontend Scan
#         uses: aquasecurity/trivy-action@master
#         continue-on-error: true
#         with:
#           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ steps.get_tag.outputs.tag }}'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           severity: 'CRITICAL,HIGH'

#       - name: Push Frontend Image
#         if: success()
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ steps.get_tag.outputs.tag }}

#   # Backend Docker Build and Scan  
#   backend-build:
#     needs: [backend-security]
#     runs-on: ubuntu-latest
#     outputs:
#       image_tag: ${{ steps.get_tag.outputs.tag }}
#     steps:
#       - name: Generate unique tag
#         id: get_tag
#         run: echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT

#       - name: Checkout Backend
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build Backend Image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: false
#           load: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ steps.get_tag.outputs.tag }}

#       - name: Trivy Backend Scan
#         uses: aquasecurity/trivy-action@master
#         continue-on-error: true
#         with:
#           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ steps.get_tag.outputs.tag }}'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           severity: 'CRITICAL,HIGH'

#       - name: Push Backend Image
#         if: success()
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ steps.get_tag.outputs.tag }}

#   # Deploy to Kubernetes
#   deploy:
#     needs: [frontend-build, backend-build]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Backend Code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}

#       - name: Google Auth
#         id: auth
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: '${{ secrets.GCP_SA_KEY }}'

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v1

#       - name: Install gke-gcloud-auth-plugin
#         run: |
#           gcloud components install gke-gcloud-auth-plugin

#       - name: Get GKE Credentials
#         run: |
#           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

#       - name: Check Current Deployments
#         run: |
#           echo "Current Deployments:"
#           kubectl get deployments
#           echo "Current Services:"
#           kubectl get services
#           echo "Current Pods:"
#           kubectl get pods

#       - name: Update Kubernetes Manifests
#         run: |
#           # Update both frontend and backend images in k8s.yaml
#           sed -i "s|image: .*imdb-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ needs.frontend-build.outputs.image_tag }}|g" k8.yaml
#           sed -i "s|image: .*imdb-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ needs.backend-build.outputs.image_tag }}|g" k8.yaml

#       - name: Deploy to K8s
#         run: |
#           # Apply the single k8.yaml file
#           kubectl apply -f k8.yaml --validate=true
          
#           # Wait for rollouts to complete
#           for deployment in $(kubectl get deployments -o jsonpath='{.items[*].metadata.name}'); do
#             echo "Waiting for deployment $deployment"
#             kubectl rollout status deployment/$deployment
#           done
          
#           # Display final state
#           echo "Final Deployments:"
#           kubectl get deployments
#           echo "Final Services:"
#           kubectl get services
#           echo "Final Pods:"
#           kubectl get pods
name: IMDB Clone CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  # Frontend Security Checks
  frontend-trufflehog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
      - uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

  frontend-semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
      - uses: semgrep/semgrep-action@v1
        with:
          config: p/javascript

  frontend-snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
      - uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Backend Security Checks
  backend-trufflehog:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
      - uses: trufflesecurity/trufflehog@main
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

  backend-semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
      - uses: semgrep/semgrep-action@v1
        with:
          config: p/javascript

  backend-snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
      - uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Docker Build Stages
  frontend-build:
    needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}

  backend-build:
    needs: [backend-trufflehog, backend-semgrep, backend-snyk]
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.image }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}

  # Parallel Scans after builds
  frontend-trivy:
    needs: [frontend-build]
    runs-on: ubuntu-latest
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  backend-trivy:
    needs: [backend-build]
    runs-on: ubuntu-latest
    steps:
      - uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # Deploy Stage
  deploy:
    needs: [frontend-trivy, backend-trivy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - uses: google-github-actions/setup-gcloud@v1

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Update and Deploy
        run: |
          # Update images in k8s.yaml
          sed -i "s|image: .*imdb-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-frontend:${{ github.sha }}|g" k8s.yaml
          sed -i "s|image: .*imdb-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}|g" k8s.yaml
          
          # Show current state
          echo "Current State:"
          kubectl get all
          
          # Apply changes
          kubectl apply -f k8s.yaml --validate=true
          
          # Wait for rollout
          for deploy in $(kubectl get deployments -o name); do
            kubectl rollout status $deploy
          done
          
          # Show final state
          echo "Final State:"
          kubectl get all
