
# # # # name: Security & Build Pipeline

# # # # on:
# # # #   push:
# # # #     branches: [ main ]
# # # #   pull_request:
# # # #     branches: [ main ]

# # # # env:
# # # #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# # # #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# # # #   MONGO_URL: ${{ secrets.MONGO_URL }}
# # # #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# # # #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # # #   GH_PAT: ${{ secrets.GH_PAT }}

# # # # jobs:
# # # #   # Frontend Security Scans
# # # #   frontend-trufflehog:
# # # #     name: Frontend TruffleHog
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: TruffleHog Scan
# # # #         uses: trufflesecurity/trufflehog@main
# # # #         continue-on-error: true
# # # #         with:
# # # #           path: .
# # # #           base: ${{ github.event.before }}
# # # #           head: ${{ github.sha }}

# # # #   frontend-semgrep:
# # # #     name: Frontend Semgrep
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: SAST Scan
# # # #         uses: semgrep/semgrep-action@v1
# # # #         continue-on-error: true
# # # #         with:
# # # #           config: p/javascript

# # # #   frontend-snyk:
# # # #     name: Frontend Snyk
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: Snyk Scan
# # # #         uses: snyk/actions/node@master
# # # #         continue-on-error: true
# # # #         env:
# # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # #   frontend-checkov:
# # # #     name: Frontend IaC Scan
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: Checkov Scan
# # # #         uses: bridgecrewio/checkov-action@master
# # # #         continue-on-error: true
# # # #         with:
# # # #           directory: .
# # # #           framework: dockerfile,kubernetes,secrets

# # # #   # Backend Security Scans
# # # #   backend-trufflehog:
# # # #     name: Backend TruffleHog
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: TruffleHog Scan
# # # #         uses: trufflesecurity/trufflehog@main
# # # #         continue-on-error: true
# # # #         with:
# # # #           path: .
# # # #           base: ${{ github.event.before }}
# # # #           head: ${{ github.sha }}

# # # #   backend-semgrep:
# # # #     name: Backend Semgrep
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: SAST Scan
# # # #         uses: semgrep/semgrep-action@v1
# # # #         continue-on-error: true
# # # #         with:
# # # #           config: p/javascript

# # # #   backend-snyk:
# # # #     name: Backend Snyk
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: Snyk Scan
# # # #         uses: snyk/actions/node@master
# # # #         continue-on-error: true
# # # #         env:
# # # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # # #   backend-checkov:
# # # #     name: Backend IaC Scan
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #       - name: Checkov Scan
# # # #         uses: bridgecrewio/checkov-action@master
# # # #         continue-on-error: true
# # # #         with:
# # # #           directory: .
# # # #           framework: dockerfile,kubernetes,secrets

# # # #   # Frontend Docker Build and Scan
# # # #   frontend-build:
# # # #     needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov]
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout Frontend
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-frontend
# # # #           token: ${{ secrets.GH_PAT }}

# # # #       - name: Login to DockerHub
# # # #         uses: docker/login-action@v2
# # # #         with:
# # # #           username: ${{ secrets.DOCKER_USERNAME }}
# # # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # # #       - name: Set up Docker Buildx
# # # #         uses: docker/setup-buildx-action@v2

# # # #       - name: Build Frontend Image
# # # #         uses: docker/build-push-action@v4
# # # #         with:
# # # #           context: .
# # # #           push: false
# # # #           load: true
# # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
# # # #           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
# # # #           cache-to: type=inline
# # # #           build-args: |
# # # #             NODE_ENV=production

# # # #       - name: Trivy Frontend Scan
# # # #         uses: aquasecurity/trivy-action@master
# # # #         continue-on-error: true
# # # #         with:
# # # #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}'
# # # #           format: 'table'
# # # #           exit-code: '1'
# # # #           ignore-unfixed: true
# # # #           severity: 'CRITICAL,HIGH'

# # # #       - name: Push Frontend Image
# # # #         uses: docker/build-push-action@v4
# # # #         with:
# # # #           context: .
# # # #           push: true
# # # #           tags: |
# # # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
# # # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest

# # # #   # Backend Docker Build and Scan
# # # #   backend-build:
# # # #     needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov]
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout Backend
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}

# # # #       - name: Login to DockerHub
# # # #         uses: docker/login-action@v2
# # # #         with:
# # # #           username: ${{ secrets.DOCKER_USERNAME }}
# # # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # # #       - name: Set up Docker Buildx
# # # #         uses: docker/setup-buildx-action@v2

# # # #       - name: Build Backend Image
# # # #         uses: docker/build-push-action@v4
# # # #         with:
# # # #           context: .
# # # #           push: false
# # # #           load: true
# # # #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-backend:${{ github.sha }}
# # # #           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
# # # #           cache-to: type=inline
# # # #           build-args: |
# # # #             NODE_ENV=production

# # # #       - name: Trivy Backend Scan
# # # #         uses: aquasecurity/trivy-action@master
# # # #         continue-on-error: true
# # # #         with:
# # # #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}'
# # # #           format: 'table'
# # # #           exit-code: '1'
# # # #           ignore-unfixed: true
# # # #           severity: 'CRITICAL,HIGH'

# # # #       - name: Push Backend Image
# # # #         uses: docker/build-push-action@v4
# # # #         with:
# # # #           context: .
# # # #           push: true
# # # #           tags: |
# # # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
# # # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest

# # # #   # Deploy to Kubernetes
# # # #   deploy:
# # # #     needs: [frontend-build, backend-build]
# # # #     runs-on: ubuntu-latest
# # # #     steps:
# # # #       - name: Checkout Backend Code
# # # #         uses: actions/checkout@v3
# # # #         with:
# # # #           repository: jai3747/imdb-clone-backend
# # # #           token: ${{ secrets.GH_PAT }}
# # # #           path: backend

# # # #       - name: Google Auth
# # # #         id: auth
# # # #         uses: google-github-actions/auth@v1
# # # #         with:
# # # #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# # # #       - name: Set up Cloud SDK
# # # #         uses: google-github-actions/setup-gcloud@v1

# # # #       - name: Install gke-gcloud-auth-plugin
# # # #         run: |
# # # #           gcloud components install gke-gcloud-auth-plugin

# # # #       - name: Get GKE Credentials
# # # #         run: |
# # # #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

# # # #       - name: Deploy Services
# # # #         run: |
# # # #           cd backend
# # # #           kubectl apply -f k8.yaml
          
# # # #           echo "Waiting for backend rollout..."
# # # #           kubectl rollout status deployment/backend-deployment -n default
          
# # # #           echo "Waiting for frontend rollout..."
# # # #           kubectl rollout status deployment/frontend-deployment -n default

# # # #       - name: Verify Deployments
# # # #         run: |
# # # #           echo "Checking deployments status:"
# # # #           kubectl get deployments -n default
          
# # # #           echo "Checking services status:"
# # # #           kubectl get services -n default
          
# # # #           echo "Checking pods status:"
# # # #           kubectl get pods -n default
          
# # # #           echo "Latest events:"
# # # #           kubectl get events -n default --sort-by='.lastTimestamp' | tail -n 10
# # # name: Security & Build Pipeline

# # # on:
# # #   push:
# # #     branches: [ main ]
# # #   pull_request:
# # #     branches: [ main ]

# # # env:
# # #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# # #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# # #   MONGO_URL: ${{ secrets.MONGO_URL }}
# # #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# # #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# # #   GH_PAT: ${{ secrets.GH_PAT }}

# # # jobs:
# # #   # Frontend Security Scans
# # #   frontend-security:
# # #     name: Frontend Security Checks
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: |
# # #           rm -rf *
# # #           rm -rf .git
      
# # #       - name: Checkout code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #           clean: true
# # #           fetch-depth: 1
      
# # #       - name: TruffleHog Scan
# # #         uses: trufflesecurity/trufflehog@main
# # #         continue-on-error: true
# # #         with:
# # #           path: .
# # #           base: ${{ github.event.before }}
# # #           head: ${{ github.sha }}

# # #       - name: SAST Scan
# # #         uses: semgrep/semgrep-action@v1
# # #         continue-on-error: true
# # #         with:
# # #           config: p/javascript

# # #       - name: Snyk Scan
# # #         uses: snyk/actions/node@master
# # #         continue-on-error: true
# # #         env:
# # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # #       - name: Checkov IaC Scan
# # #         uses: bridgecrewio/checkov-action@master
# # #         continue-on-error: true
# # #         with:
# # #           directory: .
# # #           framework: dockerfile,kubernetes,secrets

# # #   # Backend Security Scans
# # #   backend-security:
# # #     name: Backend Security Checks
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: |
# # #           rm -rf *
# # #           rm -rf .git
      
# # #       - name: Checkout code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #           clean: true
# # #           fetch-depth: 1

# # #       - name: TruffleHog Scan
# # #         uses: trufflesecurity/trufflehog@main
# # #         continue-on-error: true
# # #         with:
# # #           path: .
# # #           base: ${{ github.event.before }}
# # #           head: ${{ github.sha }}

# # #       - name: SAST Scan
# # #         uses: semgrep/semgrep-action@v1
# # #         continue-on-error: true
# # #         with:
# # #           config: p/javascript

# # #       - name: Snyk Scan
# # #         uses: snyk/actions/node@master
# # #         continue-on-error: true
# # #         env:
# # #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# # #       - name: Checkov IaC Scan
# # #         uses: bridgecrewio/checkov-action@master
# # #         continue-on-error: true
# # #         with:
# # #           directory: .
# # #           framework: dockerfile,kubernetes,secrets

# # #   # Frontend Docker Build and Scan
# # #   frontend-build:
# # #     needs: [frontend-security]
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: |
# # #           rm -rf *
# # #           rm -rf .git

# # #       - name: Checkout Frontend
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-frontend
# # #           token: ${{ secrets.GH_PAT }}
# # #           clean: true
# # #           fetch-depth: 1

# # #       - name: Login to DockerHub
# # #         uses: docker/login-action@v2
# # #         with:
# # #           username: ${{ secrets.DOCKER_USERNAME }}
# # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # #       - name: Set up Docker Buildx
# # #         uses: docker/setup-buildx-action@v2

# # #       - name: Build and Push Frontend Image
# # #         uses: docker/build-push-action@v4
# # #         with:
# # #           context: .
# # #           push: true
# # #           tags: |
# # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
# # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
# # #           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
# # #           cache-to: type=inline
# # #           build-args: |
# # #             NODE_ENV=production

# # #       - name: Trivy Frontend Scan
# # #         uses: aquasecurity/trivy-action@master
# # #         continue-on-error: true
# # #         with:
# # #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}'
# # #           format: 'table'
# # #           exit-code: '1'
# # #           ignore-unfixed: true
# # #           severity: 'CRITICAL,HIGH'

# # #   # Backend Docker Build and Scan
# # #   backend-build:
# # #     needs: [backend-security]
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: |
# # #           rm -rf *
# # #           rm -rf .git

# # #       - name: Checkout Backend
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #           clean: true
# # #           fetch-depth: 1

# # #       - name: Login to DockerHub
# # #         uses: docker/login-action@v2
# # #         with:
# # #           username: ${{ secrets.DOCKER_USERNAME }}
# # #           password: ${{ secrets.DOCKER_PASSWORD }}

# # #       - name: Set up Docker Buildx
# # #         uses: docker/setup-buildx-action@v2

# # #       - name: Build and Push Backend Image
# # #         uses: docker/build-push-action@v4
# # #         with:
# # #           context: .
# # #           push: true
# # #           tags: |
# # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
# # #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
# # #           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
# # #           cache-to: type=inline
# # #           build-args: |
# # #             NODE_ENV=production

# # #       - name: Trivy Backend Scan
# # #         uses: aquasecurity/trivy-action@master
# # #         continue-on-error: true
# # #         with:
# # #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}'
# # #           format: 'table'
# # #           exit-code: '1'
# # #           ignore-unfixed: true
# # #           severity: 'CRITICAL,HIGH'

# # #   # Deploy to Kubernetes
# # #   deploy:
# # #     needs: [frontend-build, backend-build]
# # #     runs-on: ubuntu-latest
# # #     steps:
# # #       - name: Clean workspace
# # #         run: |
# # #           rm -rf *
# # #           rm -rf .git

# # #       - name: Checkout Backend Code
# # #         uses: actions/checkout@v3
# # #         with:
# # #           repository: jai3747/imdb-clone-backend
# # #           token: ${{ secrets.GH_PAT }}
# # #           clean: true
# # #           fetch-depth: 1

# # #       - name: Google Auth
# # #         id: auth
# # #         uses: google-github-actions/auth@v1
# # #         with:
# # #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# # #       - name: Set up Cloud SDK
# # #         uses: google-github-actions/setup-gcloud@v1

# # #       - name: Install gke-gcloud-auth-plugin
# # #         run: |
# # #           gcloud components install gke-gcloud-auth-plugin

# # #       - name: Get GKE Credentials
# # #         run: |
# # #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

# # #       - name: Deploy Services
# # #         run: |
# # #           kubectl apply -f k8.yaml
          
# # #           echo "Waiting for backend rollout..."
# # #           kubectl rollout status deployment/backend-deployment -n default
          
# # #           echo "Waiting for frontend rollout..."
# # #           kubectl rollout status deployment/frontend-deployment -n default

# # #       - name: Verify Deployments
# # #         run: |
# # #           echo "Checking deployments status:"
# # #           kubectl get deployments -n default
          
# # #           echo "Checking services status:"
# # #           kubectl get services -n default
          
# # #           echo "Checking pods status:"
# # #           kubectl get pods -n default
          
# # #           echo "Latest events:"
# # #           kubectl get events -n default --sort-by='.lastTimestamp' | tail -n 10
# # name: Security & Build Pipeline

# # on:
# #   push:
# #     branches: [ main ]
# #   pull_request:
# #     branches: [ main ]

# # env:
# #   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
# #   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
# #   MONGO_URL: ${{ secrets.MONGO_URL }}
# #   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
# #   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
# #   GH_PAT: ${{ secrets.GH_PAT }}

# # jobs:
# #   # Frontend Security Scans
# #   frontend-trufflehog:
# #     name: Frontend TruffleHog
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: TruffleHog Scan
# #         uses: trufflesecurity/trufflehog@main
# #         continue-on-error: true
# #         with:
# #           path: .
# #           base: ${{ github.event.before }}
# #           head: ${{ github.sha }}

# #   frontend-semgrep:
# #     name: Frontend Semgrep
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: SAST Scan
# #         uses: semgrep/semgrep-action@v1
# #         continue-on-error: true
# #         with:
# #           config: p/javascript

# #   frontend-snyk:
# #     name: Frontend Snyk
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: Snyk Scan
# #         uses: snyk/actions/node@master
# #         continue-on-error: true
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# #   frontend-checkov:
# #     name: Frontend IaC Scan
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: Checkov Scan
# #         uses: bridgecrewio/checkov-action@master
# #         continue-on-error: true
# #         with:
# #           directory: .
# #           framework: dockerfile,kubernetes,secrets

# #   # Backend Security Scans
# #   backend-trufflehog:
# #     name: Backend TruffleHog
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: TruffleHog Scan
# #         uses: trufflesecurity/trufflehog@main
# #         continue-on-error: true
# #         with:
# #           path: .
# #           base: ${{ github.event.before }}
# #           head: ${{ github.sha }}

# #   backend-semgrep:
# #     name: Backend Semgrep
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: SAST Scan
# #         uses: semgrep/semgrep-action@v1
# #         continue-on-error: true
# #         with:
# #           config: p/javascript

# #   backend-snyk:
# #     name: Backend Snyk
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: Snyk Scan
# #         uses: snyk/actions/node@master
# #         continue-on-error: true
# #         env:
# #           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

# #   backend-checkov:
# #     name: Backend IaC Scan
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: Checkov Scan
# #         uses: bridgecrewio/checkov-action@master
# #         continue-on-error: true
# #         with:
# #           directory: .
# #           framework: dockerfile,kubernetes,secrets

# #   # Frontend Docker Build and Scan
# #   frontend-build:
# #     needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov]
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout Frontend
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-frontend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: Login to DockerHub
# #         uses: docker/login-action@v2
# #         with:
# #           username: ${{ secrets.DOCKER_USERNAME }}
# #           password: ${{ secrets.DOCKER_PASSWORD }}

# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v2

# #       - name: Build Frontend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: .
# #           push: false
# #           load: true
# #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
# #           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
# #           cache-to: type=inline
# #           build-args: |
# #             NODE_ENV=production

# #       - name: Trivy Frontend Scan
# #         uses: aquasecurity/trivy-action@master
# #         continue-on-error: true
# #         with:
# #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}'
# #           format: 'table'
# #           exit-code: '1'
# #           ignore-unfixed: true
# #           severity: 'CRITICAL,HIGH'

# #       - name: Push Frontend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: .
# #           push: true
# #           tags: |
# #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
# #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest

# #   # Backend Docker Build and Scan
# #   backend-build:
# #     needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov]
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout Backend
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
# #           clean: true

# #       - name: Login to DockerHub
# #         uses: docker/login-action@v2
# #         with:
# #           username: ${{ secrets.DOCKER_USERNAME }}
# #           password: ${{ secrets.DOCKER_PASSWORD }}

# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v2

# #       - name: Build Backend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: .
# #           push: false
# #           load: true
# #           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
# #           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
# #           cache-to: type=inline
# #           build-args: |
# #             NODE_ENV=production

# #       - name: Trivy Backend Scan
# #         uses: aquasecurity/trivy-action@master
# #         continue-on-error: true
# #         with:
# #           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}'
# #           format: 'table'
# #           exit-code: '1'
# #           ignore-unfixed: true
# #           severity: 'CRITICAL,HIGH'

# #       - name: Push Backend Image
# #         uses: docker/build-push-action@v4
# #         with:
# #           context: .
# #           push: true
# #           tags: |
# #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
# #             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest

# #   # Deploy to Kubernetes
# #   deploy:
# #     needs: [frontend-build, backend-build]
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clean workspace
# #         run: |
# #           rm -rf *
# #           rm -rf .git
          
# #       - name: Checkout Backend Code
# #         uses: actions/checkout@v3
# #         with:
# #           repository: jai3747/imdb-clone-backend
# #           token: ${{ secrets.GH_PAT }}
# #           path: backend
# #           clean: true

# #       - name: Google Auth
# #         id: auth
# #         uses: google-github-actions/auth@v1
# #         with:
# #           credentials_json: '${{ secrets.GCP_SA_KEY }}'

# #       - name: Set up Cloud SDK
# #         uses: google-github-actions/setup-gcloud@v1

# #       - name: Install gke-gcloud-auth-plugin
# #         run: |
# #           gcloud components install gke-gcloud-auth-plugin

# #       - name: Get GKE Credentials
# #         run: |
# #           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

# #       - name: Deploy Services
# #         run: |
# #           cd backend
# #           kubectl get pods,svc && kubectl delete deployment backend-deployment frontend-deployment && kubectl delete statefulset mongodb
# #           kubectl apply -f k8.yaml
          
# #           echo "Waiting for backend rollout..."
# #           kubectl rollout status deployment/backend-deployment -n default
          
# #           echo "Waiting for frontend rollout..."
# #           kubectl rollout status deployment/frontend-deployment -n default

# #       - name: Verify Deployments
# #         run: |
# #           echo "Checking deployments status:"
# #           kubectl get deployments -n default
          
# #           echo "Checking services status:"
# #           kubectl get services -n default
          
# #           echo "Checking pods status:"
# #           kubectl get pods -n default
          
# #           echo "Latest events:"
# #           kubectl get events -n default --sort-by='.lastTimestamp' | tail -n 10
# name: Security & Build Pipeline

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# env:
#   GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
#   GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
#   MONGO_URL: ${{ secrets.MONGO_URL }}
#   SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
#   SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#   GH_PAT: ${{ secrets.GH_PAT }}

# jobs:
#   cleanup:
#     name: Clean Workspace
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clean Workspace
#         run: |
#           rm -rf *
#           rm -rf .git
#           echo "Cleaned workspace"

#   # Frontend Security Scans
#   frontend-security:
#     needs: cleanup
#     name: Frontend Security Checks
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clean Workspace
#         run: |
#           rm -rf *
#           rm -rf .git
          
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}
#           clean: true
#           fetch-depth: 0

#       - name: TruffleHog Scan
#         uses: trufflesecurity/trufflehog@main
#         continue-on-error: true
#         with:
#           path: .
#           base: ${{ github.event.before }}
#           head: ${{ github.sha }}

#       - name: SAST Scan
#         uses: semgrep/semgrep-action@v1
#         continue-on-error: true
#         with:
#           config: p/javascript

#       - name: Snyk Scan
#         uses: snyk/actions/node@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#       - name: Checkov IaC Scan
#         uses: bridgecrewio/checkov-action@master
#         continue-on-error: true
#         with:
#           directory: .
#           framework: dockerfile,kubernetes,secrets

#   # Backend Security Scans
#   backend-security:
#     needs: cleanup
#     name: Backend Security Checks
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clean Workspace
#         run: |
#           rm -rf *
#           rm -rf .git
          
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}
#           clean: true
#           fetch-depth: 0

#       - name: TruffleHog Scan
#         uses: trufflesecurity/trufflehog@main
#         continue-on-error: true
#         with:
#           path: .
#           base: ${{ github.event.before }}
#           head: ${{ github.sha }}

#       - name: SAST Scan
#         uses: semgrep/semgrep-action@v1
#         continue-on-error: true
#         with:
#           config: p/javascript

#       - name: Snyk Scan
#         uses: snyk/actions/node@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

#       - name: Checkov IaC Scan
#         uses: bridgecrewio/checkov-action@master
#         continue-on-error: true
#         with:
#           directory: .
#           framework: dockerfile,kubernetes,secrets

#   # Frontend Docker Build
#   frontend-build:
#     needs: frontend-security
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clean Workspace
#         run: |
#           rm -rf *
#           rm -rf .git
          
#       - name: Checkout Frontend
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}
#           clean: true
#           fetch-depth: 0

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build Frontend Image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: false
#           load: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
#           cache-to: type=inline
#           build-args: |
#             NODE_ENV=production

#       - name: Trivy Frontend Scan
#         uses: aquasecurity/trivy-action@master
#         continue-on-error: true
#         with:
#           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           severity: 'CRITICAL,HIGH'

#       - name: Push Frontend Image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest

#   # Backend Docker Build
#   backend-build:
#     needs: backend-security
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clean Workspace
#         run: |
#           rm -rf *
#           rm -rf .git
          
#       - name: Checkout Backend
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}
#           clean: true
#           fetch-depth: 0

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build Backend Image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: false
#           load: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
#           cache-to: type=inline
#           build-args: |
#             NODE_ENV=production

#       - name: Trivy Backend Scan
#         uses: aquasecurity/trivy-action@master
#         continue-on-error: true
#         with:
#           image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}'
#           format: 'table'
#           exit-code: '1'
#           ignore-unfixed: true
#           severity: 'CRITICAL,HIGH'

#       - name: Push Backend Image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: |
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
#             ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest

#   # Deploy to Kubernetes
#   deploy:
#     needs: [frontend-build, backend-build]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clean Workspace
#         run: |
#           rm -rf *
#           rm -rf .git
#           echo "Cleaned workspace"

#       - name: Checkout Backend Code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-backend
#           token: ${{ secrets.GH_PAT }}
#           path: backend
#           clean: true
#           fetch-depth: 0

#       - name: Checkout Frontend Code
#         uses: actions/checkout@v3
#         with:
#           repository: jai3747/imdb-clone-frontend
#           token: ${{ secrets.GH_PAT }}
#           path: frontend
#           clean: true
#           fetch-depth: 0

#       - name: Google Auth
#         id: auth
#         uses: google-github-actions/auth@v1
#         with:
#           credentials_json: '${{ secrets.GCP_SA_KEY }}'

#       - name: Set up Cloud SDK
#         uses: google-github-actions/setup-gcloud@v1

#       - name: Install gke-gcloud-auth-plugin
#         run: |
#           gcloud components install gke-gcloud-auth-plugin

#       - name: Get GKE Credentials
#         run: |
#           gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

#       - name: Deploy Services
#         run: |
#           cd backend
#           echo "Creating MongoDB Secret..."
#           kubectl create secret generic mongodb-secret \
#             --from-literal=MONGO_URL="${{ secrets.MONGO_URL }}" \
#             --dry-run=client -o yaml | kubectl apply -f -
          
#           echo "Applying Kubernetes configurations..."
#           kubectl apply -f k8.yaml
          
#           echo "Waiting for deployments to complete..."
#           kubectl rollout status deployment/backend-deployment -n default
#           kubectl rollout status deployment/frontend-deployment -n default

#       - name: Verify Deployments
#         run: |
#           echo "Checking workspace contents:"
#           ls -la
          
#           echo "Checking deployments status:"
#           kubectl get deployments
          
#           echo "Checking services status:"
#           kubectl get services
          
#           echo "Checking pods status:"
#           kubectl get pods
          
#           echo "Latest events:"
#           kubectl get events --sort-by='.lastTimestamp' | tail -n 10
name: Security & Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  frontend-security:
    name: Frontend Security Scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

      - name: SAST Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript

      - name: Snyk Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets

  backend-security:
    name: Backend Security Scans
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          clean: true

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}

      - name: SAST Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript

      - name: Snyk Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets

  frontend-build:
    needs: [frontend-security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Test Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

      - name: Trivy Frontend Scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest

  backend-build:
    needs: [backend-security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Test Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

      - name: Trivy Backend Scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest

  deploy:
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infrastructure Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          path: backend
          clean: true

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials cluster-1 --zone asia-south1-a --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Update Kubernetes Manifests
        run: |
          cd backend
          # Update image tags in deployment files
          sed -i "s|image: .*imdb-clone-frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}|g" k8.yaml
          sed -i "s|image: .*imdb-clone-backend.*|image: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}|g" k8.yaml

      - name: Deploy MongoDB
        run: |
          cd backend
          echo "Creating MongoDB Secret..."
          kubectl create secret generic mongodb-secret \
            --from-literal=MONGO_URL="${{ secrets.MONGO_URL }}" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply MongoDB StatefulSet and wait for readiness
          kubectl apply -f k8.yaml
          kubectl rollout status statefulset/mongodb --timeout=300s

      - name: Deploy Backend
        run: |
          cd backend
          # Apply backend deployment with progressive rollout
          kubectl apply -f k8.yaml
          
          # Wait for backend deployment with increased timeout
          kubectl rollout status deployment/backend-deployment --timeout=300s
          
          # Verify backend health
          kubectl wait --for=condition=ready pod -l app=backend --timeout=300s

      - name: Deploy Frontend
        run: |
          cd backend
          # Apply frontend deployment with progressive rollout
          kubectl apply -f k8.yaml
          
          # Wait for frontend deployment with increased timeout
          kubectl rollout status deployment/frontend-deployment --timeout=300s
          
          # Verify frontend health
          kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s

      - name: Verify Deployment
        run: |
          echo "Checking deployments status:"
          kubectl get deployments
          
          echo "Checking services status:"
          kubectl get services
          
          echo "Checking pods status:"
          kubectl get pods
          
          echo "Latest events:"
          kubectl get events --sort-by='.lastTimestamp' | tail -n 10

      - name: Deployment Health Check
        run: |
          # Check if all pods are running
          if [ $(kubectl get pods -o jsonpath='{.items[?(@.status.phase!="Running")].metadata.name}' | wc -w) -ne 0 ]; then
            echo "Some pods are not running. Current pod status:"
            kubectl get pods
            exit 1
          fi
          
          # Check if services are available
          if ! kubectl get svc backend-service frontend-service mongodb-service; then
            echo "Some services are not available"
            exit 1
          fi
