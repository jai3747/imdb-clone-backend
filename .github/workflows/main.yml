name: Security & Build Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  MONGO_URL: ${{ secrets.MONGO_URL }}
  SEMGREP_TOKEN: ${{ secrets.SEMGREP_TOKEN }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GH_PAT: ${{ secrets.GH_PAT }}
  CLUSTER_NAME: cluster-1
  CLUSTER_ZONE: asia-south1-a
  APP_DOMAIN: "http://myapp.awsaparna123.xyz"

jobs:
  # Frontend Security Scans
  frontend-trufflehog:
    name: üê∑ Frontend TruffleHog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
      
      - name: TruffleHog Scan
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          output: trufflehog-report.json
          format: json

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-trufflehog-report
          path: trufflehog-report.json

  frontend-semgrep:
    name: üîç Frontend Semgrep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
      
      - name: Semgrep Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript
          output: semgrep-results.json
          json: true
          
      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-semgrep-report
          path: semgrep-results.json

  frontend-snyk:
    name: üõ°Ô∏è Frontend Snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}

      - name: Snyk Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          json: true
          args: --json-file-output=snyk-results.json

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-snyk-report
          path: snyk-results.json

  frontend-checkov:
    name: üèóÔ∏è Frontend Checkov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}

      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets
          output_format: json
          output_file_path: checkov-results.json

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-checkov-report
          path: checkov-results.json

  # Backend Security Scans
  backend-trufflehog:
    name: üê∑ Backend TruffleHog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: TruffleHog Scan
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          output: trufflehog-report.json
          format: json

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-trufflehog-report
          path: trufflehog-report.json

  backend-semgrep:
    name: üîç Backend Semgrep
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Semgrep Scan
        uses: semgrep/semgrep-action@v1
        continue-on-error: true
        with:
          config: p/javascript
          output: semgrep-results.json
          json: true

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-semgrep-report
          path: semgrep-results.json

  backend-snyk:
    name: üõ°Ô∏è Backend Snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Snyk Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          json: true
          args: --json-file-output=snyk-results.json

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-snyk-report
          path: snyk-results.json

  backend-checkov:
    name: üèóÔ∏è Backend Checkov
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}

      - name: Checkov Scan
        uses: bridgecrewio/checkov-action@master
        continue-on-error: true
        with:
          directory: .
          framework: dockerfile,kubernetes,secrets
          output_format: json
          output_file_path: checkov-results.json

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-checkov-report
          path: checkov-results.json

  # DAST Scans
  dast-zap:
    name: üï∑Ô∏è DAST ZAP Scan
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        continue-on-error: true
        with:
          target: ${{ env.APP_DOMAIN }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -I'
          allow_issue_writing: true
          format: json
          output_file: zap-report.json

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-report
          path: zap-report.json

  dast-nuclei:
    name: üéØ DAST Nuclei Scan
    runs-on: ubuntu-latest
    steps:
      - name: Run Nuclei Scan
        uses: projectdiscovery/nuclei-action@main
        continue-on-error: true
        with:
          target: ${{ env.APP_DOMAIN }}
          templates: "cves,vulnerabilities,exposures,misconfiguration"
          severity: "critical,high,medium"
          output: "nuclei-results.json"
          json: true
          rate-limit: 150
          bulk-size: 25

      - name: Upload Nuclei Results
        uses: actions/upload-artifact@v3
        with:
          name: nuclei-scan-report
          path: nuclei-results.json

  # Build Jobs
  frontend-build:
    needs: [frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Frontend Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-frontend
          token: ${{ secrets.GH_PAT }}
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
          format: 'json'
          output: 'trivy-frontend-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-trivy-report
          path: trivy-frontend-results.json

      - name: Push Image if Scan Passes
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-frontend:latest

  backend-build:
    needs: [backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Code
        uses: actions/checkout@v3
        with:
          repository: jai3747/imdb-clone-backend
          token: ${{ secrets.GH_PAT }}
          clean: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test
        continue-on-error: true

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
          format: 'json'
          output: 'trivy-backend-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
          vuln-type: 'os,library'

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v3
        with:
          name: backend-trivy-report
          path: trivy-backend-results.json

      - name: Push Image if Scan Passes
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/imdb-clone-backend:latest

  generate-summary:
    needs: [
      frontend-trufflehog, frontend-semgrep, frontend-snyk, frontend-checkov,
      backend-trufflehog, backend-semgrep, backend-snyk, backend-checkov,
      dast-zap, dast-nuclei, frontend-build, backend-build
    ]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports

      - name: Generate Summary Report
        run: |
          echo "# Security Scan Summary Report" > summary-report.md
          
          echo "## Frontend Scans" >> summary-report.md
          echo "* TruffleHog: $(cat security-reports/frontend-trufflehog-report/trufflehog-report.json | jq length) findings" >> summary-report.md
          echo "* Semgrep: $(cat security-reports/frontend-semgrep-report/semgrep-results.json | jq '.results | length') findings" >> summary-report.md
          echo "* Snyk: $(cat security-reports/frontend-snyk-report/snyk-results.json | jq '.vulnerabilities | length') vulnerabilities" >> summary-report.md
          echo "* Checkov: $(cat security-reports/frontend-checkov-report/checkov-results.json | jq '.results.failed_checks | length') failed checks" >> summary-report.md
          echo "* Trivy: $(cat security-reports/frontend-trivy-report/trivy-frontend-results.json | jq '[.Results[].Vulnerabilities[]] | length') vulnerabilities" >> summary-report.md
          
          echo "## Backend Scans" >> summary-report.md
          echo "* TruffleHog: $(cat security-reports/backend-trufflehog-report/trufflehog-report.json | jq length) findings" >> summary-report.md
          echo "* Semgrep: $(cat security-reports/backend-semgrep-report/semgrep-results.json | jq '.results | length') findings" >> summary-report.md
          echo "* Snyk: $(cat security-reports/backend-snyk-report/snyk-results.json | jq '.vulnerabilities | length') vulnerabilities" >> summary-report.md
          echo "* Checkov: $(cat security-reports/backend-checkov-report/checkov-results.json | jq '.results.failed_checks | length') failed checks" >> summary-report.md
          echo "* Trivy: $(cat security-reports/backend-trivy-report/trivy-backend-results.json | jq '[.Results[].Vulnerabilities[]] | length') vulnerabilities" >> summary-report.md
          
          echo "## DAST Scans" >> summary-report.md
          echo "* ZAP: $(cat security-reports/zap-scan-report/zap-report.json | jq '.site[0].alerts | length') alerts" >> summary-report.md
          echo "* Nuclei: $(cat security-reports/nuclei-scan-report/nuclei-results.json | jq length) findings" >> summary-report.md
          
          echo "## Summary Statistics" >> summary-report.md
          echo "### Frontend" >> summary-report.md
          FRONTEND_TOTAL=$((
            $(cat security-reports/frontend-trufflehog-report/trufflehog-report.json | jq length) +
            $(cat security-reports/frontend-semgrep-report/semgrep-results.json | jq '.results | length') +
            $(cat security-reports/frontend-snyk-report/snyk-results.json | jq '.vulnerabilities | length') +
            $(cat security-reports/frontend-checkov-report/checkov-results.json | jq '.results.failed_checks | length') +
            $(cat security-reports/frontend-trivy-report/trivy-frontend-results.json | jq '[.Results[].Vulnerabilities[]] | length')
          ))
          echo "Total Issues: $FRONTEND_TOTAL" >> summary-report.md
          
          echo "### Backend" >> summary-report.md
          BACKEND_TOTAL=$((
            $(cat security-reports/backend-trufflehog-report/trufflehog-report.json | jq length) +
            $(cat security-reports/backend-semgrep-report/semgrep-results.json | jq '.results | length') +
            $(cat security-reports/backend-snyk-report/snyk-results.json | jq '.vulnerabilities | length') +
            $(cat security-reports/backend-checkov-report/checkov-results.json | jq '.results.failed_checks | length') +
            $(cat security-reports/backend-trivy-report/trivy-backend-results.json | jq '[.Results[].Vulnerabilities[]] | length')
          ))
          echo "Total Issues: $BACKEND_TOTAL" >> summary-report.md

      - name: Upload Summary Report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary-report
          path: summary-report.md
