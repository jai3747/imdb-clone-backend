# # # apiVersion: v1
# # # kind: Namespace
# # # metadata:
# # #   name: backend

# # # ---
# # # # Prometheus ServiceAccount
# # # apiVersion: v1
# # # kind: ServiceAccount
# # # metadata:
# # #   name: prometheus
# # #   namespace: backend

# # # ---
# # # # MongoDB Secret
# # # apiVersion: v1
# # # kind: Secret
# # # metadata:
# # #   name: mongodb-secret
# # #   namespace: backend
# # # type: Opaque
# # # stringData:
# # #   MONGO_URL: mongodb+srv://JAYACHANDRAN:KQJrxDn44181NsqT@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

# # # ---
# # # apiVersion: rbac.authorization.k8s.io/v1
# # # kind: ClusterRole
# # # metadata:
# # #   name: prometheus
# # # rules:
# # # - apiGroups: [""]
# # #   resources:
# # #   - nodes
# # #   - nodes/proxy
# # #   - services
# # #   - endpoints
# # #   - pods
# # #   verbs: ["get", "list", "watch"]
# # # - apiGroups:
# # #   - extensions
# # #   resources:
# # #   - ingresses
# # #   verbs: ["get", "list", "watch"]
# # # - nonResourceURLs: ["/metrics"]
# # #   verbs: ["get"]

# # # ---
# # # apiVersion: rbac.authorization.k8s.io/v1
# # # kind: ClusterRoleBinding
# # # metadata:
# # #   name: prometheus
# # # roleRef:
# # #   apiGroup: rbac.authorization.k8s.io
# # #   kind: ClusterRole
# # #   name: prometheus
# # # subjects:
# # # - kind: ServiceAccount
# # #   name: prometheus
# # #   namespace: backend

# # # ---
# # # # MongoDB ConfigMap
# # # apiVersion: v1
# # # kind: ConfigMap
# # # metadata:
# # #   name: mongodb-configmap
# # #   namespace: backend
# # # data:
# # #   MONGODB_INITDB_DATABASE: "imdb"

# # # ---
# # # # Frontend ConfigMap
# # # apiVersion: v1
# # # kind: ConfigMap
# # # metadata:
# # #   name: frontend-config
# # #   namespace: backend
# # # data:
# # #   REACT_APP_BACKEND_API: "http://backend.awsaparna123.xyz:5000/api"


# # # ---
# # # apiVersion: v1
# # # kind: ConfigMap
# # # metadata:
# # #   name: prometheus-config
# # #   namespace: backend
# # # data:
# # #   prometheus.yml: |
# # #     global:
# # #       scrape_interval: 15s
# # #       evaluation_interval: 15s
# # #     scrape_configs:
# # #       - job_name: 'kubernetes-apiservers'
# # #         kubernetes_sd_configs:
# # #         - role: endpoints
# # #         scheme: https
# # #         tls_config:
# # #           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
# # #         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
# # #         relabel_configs:
# # #         - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
# # #           action: keep
# # #           regex: default;kubernetes;https

# # #       - job_name: 'kubernetes-nodes'
# # #         scheme: https
# # #         tls_config:
# # #           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
# # #         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
# # #         kubernetes_sd_configs:
# # #         - role: node
# # #         relabel_configs:
# # #         - action: labelmap
# # #           regex: __meta_kubernetes_node_label_(.+)
# # #         - target_label: __address__
# # #           replacement: kubernetes.default.svc:443
# # #         - source_labels: [__meta_kubernetes_node_name]
# # #           regex: (.+)
# # #           target_label: __metrics_path__
# # #           replacement: /api/v1/nodes/${1}/proxy/metrics

# # #       - job_name: 'kubernetes-pods'
# # #         kubernetes_sd_configs:
# # #         - role: pod
# # #         relabel_configs:
# # #         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
# # #           action: keep
# # #           regex: true
# # #         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
# # #           action: replace
# # #           target_label: __metrics_path__
# # #           regex: (.+)
# # #         - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
# # #           action: replace
# # #           regex: ([^:]+)(?::\d+)?;(\d+)
# # #           replacement: $1:$2
# # #           target_label: __address__
# # #         - action: labelmap
# # #           regex: __meta_kubernetes_pod_label_(.+)
# # #         - source_labels: [__meta_kubernetes_namespace]
# # #           action: replace
# # #           target_label: kubernetes_namespace
# # #         - source_labels: [__meta_kubernetes_pod_name]
# # #           action: replace
# # #           target_label: kubernetes_pod_name

# # # ---
# # # # Grafana ConfigMap for Dashboards
# # # apiVersion: v1
# # # kind: ConfigMap
# # # metadata:
# # #   name: grafana-dashboards
# # #   namespace: backend
# # # data:
# # #   k8s-cluster-dashboard.json: |
# # #     {
# # #       "annotations": {
# # #         "list": []
# # #       },
# # #       "editable": true,
# # #       "fiscalYearStartMonth": 0,
# # #       "graphTooltip": 0,
# # #       "id": 1,
# # #       "links": [],
# # #       "liveNow": false,
# # #       "panels": [
# # #         {
# # #           "datasource": {
# # #             "type": "prometheus",
# # #             "uid": "prometheus"
# # #           },
# # #           "fieldConfig": {
# # #             "defaults": {
# # #               "color": {
# # #                 "mode": "palette-classic"
# # #               },
# # #               "custom": {
# # #                 "axisCenteredZero": false,
# # #                 "axisColorMode": "text",
# # #                 "axisLabel": "",
# # #                 "axisPlacement": "auto",
# # #                 "barAlignment": 0,
# # #                 "drawStyle": "line",
# # #                 "fillOpacity": 0,
# # #                 "gradientMode": "none",
# # #                 "hideFrom": {
# # #                   "legend": false,
# # #                   "tooltip": false,
# # #                   "viz": false
# # #                 },
# # #                 "lineInterpolation": "linear",
# # #                 "lineWidth": 1,
# # #                 "pointSize": 5,
# # #                 "scaleDistribution": {
# # #                   "type": "linear"
# # #                 },
# # #                 "showPoints": "auto",
# # #                 "spanNulls": false,
# # #                 "stacking": {
# # #                   "group": "A",
# # #                   "mode": "none"
# # #                 },
# # #                 "thresholdsStyle": {
# # #                   "mode": "off"
# # #                 }
# # #               },
# # #               "mappings": [],
# # #               "thresholds": {
# # #                 "mode": "absolute",
# # #                 "steps": [
# # #                   {
# # #                     "color": "green",
# # #                     "value": null
# # #                   }
# # #                 ]
# # #               }
# # #             },
# # #             "overrides": []
# # #           },
# # #           "gridPos": {
# # #             "h": 8,
# # #             "w": 12,
# # #             "x": 0,
# # #             "y": 0
# # #           },
# # #           "id": 1,
# # #           "options": {
# # #             "legend": {
# # #               "calcs": [],
# # #               "displayMode": "list",
# # #               "placement": "bottom",
# # #               "showLegend": true
# # #             },
# # #             "tooltip": {
# # #               "mode": "single",
# # #               "sort": "none"
# # #             }
# # #           },
# # #           "title": "CPU Usage",
# # #           "type": "timeseries",
# # #           "targets": [
# # #             {
# # #               "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"\"}[5m])) by (pod)",
# # #               "legendFormat": "{{pod}}"
# # #             }
# # #           ]
# # #         },
# # #         {
# # #           "datasource": {
# # #             "type": "prometheus",
# # #             "uid": "prometheus"
# # #           },
# # #           "fieldConfig": {
# # #             "defaults": {
# # #               "color": {
# # #                 "mode": "palette-classic"
# # #               },
# # #               "custom": {
# # #                 "axisCenteredZero": false,
# # #                 "axisColorMode": "text",
# # #                 "axisLabel": "",
# # #                 "axisPlacement": "auto",
# # #                 "barAlignment": 0,
# # #                 "drawStyle": "line",
# # #                 "fillOpacity": 0,
# # #                 "gradientMode": "none",
# # #                 "hideFrom": {
# # #                   "legend": false,
# # #                   "tooltip": false,
# # #                   "viz": false
# # #                 },
# # #                 "lineInterpolation": "linear",
# # #                 "lineWidth": 1,
# # #                 "pointSize": 5,
# # #                 "scaleDistribution": {
# # #                   "type": "linear"
# # #                 },
# # #                 "showPoints": "auto",
# # #                 "spanNulls": false,
# # #                 "stacking": {
# # #                   "group": "A",
# # #                   "mode": "none"
# # #                 },
# # #                 "thresholdsStyle": {
# # #                   "mode": "off"
# # #                 }
# # #               },
# # #               "mappings": [],
# # #               "thresholds": {
# # #                 "mode": "absolute",
# # #                 "steps": [
# # #                   {
# # #                     "color": "green",
# # #                     "value": null
# # #                   }
# # #                 ]
# # #               },
# # #               "unit": "bytes"
# # #             },
# # #             "overrides": []
# # #           },
# # #           "gridPos": {
# # #             "h": 8,
# # #             "w": 12,
# # #             "x": 12,
# # #             "y": 0
# # #           },
# # #           "id": 2,
# # #           "options": {
# # #             "legend": {
# # #               "calcs": [],
# # #               "displayMode": "list",
# # #               "placement": "bottom",
# # #               "showLegend": true
# # #             },
# # #             "tooltip": {
# # #               "mode": "single",
# # #               "sort": "none"
# # #             }
# # #           },
# # #           "title": "Memory Usage",
# # #           "type": "timeseries",
# # #           "targets": [
# # #             {
# # #               "expr": "sum(container_memory_usage_bytes{container!=\"\"}) by (pod)",
# # #               "legendFormat": "{{pod}}"
# # #             }
# # #           ]
# # #         }
# # #       ],
# # #       "refresh": "5s",
# # #       "schemaVersion": 38,
# # #       "style": "dark",
# # #       "tags": [],
# # #       "templating": {
# # #         "list": []
# # #       },
# # #       "time": {
# # #         "from": "now-6h",
# # #         "to": "now"
# # #       },
# # #       "timepicker": {},
# # #       "timezone": "",
# # #       "title": "Kubernetes Cluster Monitoring",
# # #       "uid": "k8s-cluster-monitoring",
# # #       "version": 1,
# # #       "weekStart": ""
# # #     }

# # # ---
# # # # MongoDB PVC
# # # apiVersion: v1
# # # kind: PersistentVolumeClaim
# # # metadata:
# # #   name: mongodb-data
# # #   namespace: backend
# # # spec:
# # #   accessModes:
# # #     - ReadWriteOnce
# # #   resources:
# # #     requests:
# # #       storage: 1Gi
# # #   storageClassName: standard-rwo

# # # ---
# # # # MongoDB Deployment
# # # apiVersion: apps/v1
# # # kind: Deployment
# # # metadata:
# # #   name: mongodb
# # #   namespace: backend
# # # spec:
# # #   replicas: 1
# # #   selector:
# # #     matchLabels:
# # #       app: mongodb
# # #   template:
# # #     metadata:
# # #       labels:
# # #         app: mongodb
# # #       annotations:
# # #         prometheus.io/scrape: "true"
# # #         prometheus.io/port: "27017"
# # #     spec:
# # #       securityContext:
# # #         fsGroup: 999
# # #         runAsUser: 999
# # #         runAsNonRoot: true
# # #       containers:
# # #       - name: mongodb
# # #         image: mongo:6.0
# # #         ports:
# # #         - containerPort: 27017
# # #         env:
# # #         - name: MONGO_INITDB_DATABASE
# # #           valueFrom:
# # #             configMapKeyRef:
# # #               name: mongodb-configmap
# # #               key: MONGODB_INITDB_DATABASE
# # #         resources:
# # #           requests:
# # #             memory: "512Mi"
# # #             cpu: "250m"
# # #           limits:
# # #             memory: "1Gi"
# # #             cpu: "500m"
# # #         volumeMounts:
# # #         - name: mongodb-data
# # #           mountPath: /data/db
# # #         - name: mongodb-tmp
# # #           mountPath: /tmp
# # #       volumes:
# # #       - name: mongodb-data
# # #         persistentVolumeClaim:
# # #           claimName: mongodb-data
# # #       - name: mongodb-tmp
# # #         emptyDir: {}

# # # ---
# # # # MongoDB Service
# # # apiVersion: v1
# # # kind: Service
# # # metadata:
# # #   name: mongodb-service
# # #   namespace: backend
# # #   annotations:
# # #     prometheus.io/scrape: "true"
# # #     prometheus.io/port: "27017"
# # # spec:
# # #   type: ClusterIP
# # #   ports:
# # #   - port: 27017
# # #     targetPort: 27017
# # #   selector:
# # #     app: mongodb

# # # ---
# # # # Backend Deployment
# # # apiVersion: apps/v1
# # # kind: Deployment
# # # metadata:
# # #   name: backend-deployment
# # #   namespace: backend
# # # spec:
# # #   replicas: 1
# # #   selector:
# # #     matchLabels:
# # #       app: backend
# # #   template:
# # #     metadata:
# # #       labels:
# # #         app: backend
# # #       annotations:
# # #         prometheus.io/scrape: "true"
# # #         prometheus.io/port: "5000"
# # #         prometheus.io/path: "/metrics"
# # #     spec:
# # #       containers:
# # #       - name: backend
# # #         image: jai3747/imdb-clone-backend:latest
# # #         imagePullPolicy: Always
# # #         ports:
# # #         - containerPort: 5000
# # #         env:
# # #         - name: PORT
# # #           value: "5000"
# # #         - name: NODE_ENV
# # #           value: "production"
# # #         - name: MONGO_URL
# # #           valueFrom:
# # #             secretKeyRef:
# # #               name: mongodb-secret
# # #               key: MONGO_URL
# # #         readinessProbe:
# # #           httpGet:
# # #             path: /api/health
# # #             port: 5000
# # #           initialDelaySeconds: 30
# # #           periodSeconds: 10
# # #           timeoutSeconds: 5
# # #           failureThreshold: 3
# # #         livenessProbe:
# # #           httpGet:
# # #             path: /api/health
# # #             port: 5000
# # #           initialDelaySeconds: 60
# # #           periodSeconds: 20
# # #           timeoutSeconds: 5
# # #           failureThreshold: 3
# # #         resources:
# # #           requests:
# # #             memory: "256Mi"
# # #             cpu: "100m"
# # #           limits:
# # #             memory: "512Mi"
# # #             cpu: "200m"
# # #         volumeMounts:
# # #         - name: tmp
# # #           mountPath: /tmp
# # #       volumes:
# # #       - name: tmp
# # #         emptyDir: {}

# # # ---
# # # # Backend Service
# # # apiVersion: v1
# # # kind: Service
# # # metadata:
# # #   name: backend-service
# # #   namespace: backend
# # #   annotations:
# # #     prometheus.io/scrape: "true"
# # #     prometheus.io/port: "5000"
# # # spec:
# # #   type: LoadBalancer
# # #   ports:
# # #   - port: 5000
# # #     targetPort: 5000
# # #   selector:
# # #     app: backend

# # # ---
# # # # Frontend Deployment (Completed)
# # # apiVersion: apps/v1
# # # kind: Deployment
# # # metadata:
# # #   name: frontend-deployment
# # #   namespace: backend
# # # spec:
# # #   replicas: 1
# # #   selector:
# # #     matchLabels:
# # #       app: frontend
# # #   template:
# # #     metadata:
# # #       labels:
# # #         app: frontend
# # #       annotations:
# # #         prometheus.io/scrape: "true"
# # #         prometheus.io/port: "3000"
# # #     spec:
# # #       containers:
# # #       - name: frontend
# # #         image: jai3747/imdb-clone-frontend:latest
# # #         imagePullPolicy: Always
# # #         ports:
# # #         - containerPort: 3000
# # #         env:
# # #         - name: HOST
# # #           value: "0.0.0.0"
# # #         - name: PORT
# # #           value: "3000"
# # #         - name: REACT_APP_BACKEND_API
# # #           valueFrom:
# # #             configMapKeyRef:
# # #               name: frontend-config
# # #               key: REACT_APP_BACKEND_API
# # #         readinessProbe:
# # #           httpGet:
# # #             path: /
# # #             port: 3000
# # #           initialDelaySeconds: 30
# # #           periodSeconds: 10
# # #           timeoutSeconds: 5
# # #           failureThreshold: 3
# # #         livenessProbe:
# # #           httpGet:
# # #             path: /
# # #             port: 3000
# # #           initialDelaySeconds: 60
# # #           periodSeconds: 20
# # #           timeoutSeconds: 5
# # #           failureThreshold: 3
# # #         resources:
# # #           requests:
# # #             memory: "256Mi"
# # #             cpu: "100m"
# # #           limits:
# # #             memory: "512Mi"
# # #             cpu: "200m"
# # #         volumeMounts:
# # #         - name: tmp
# # #           mountPath: /tmp
# # #       volumes:
# # #       - name: tmp
# # #         emptyDir: {}

# # # ---
# # # # Frontend Service
# # # apiVersion: v1
# # # kind: Service
# # # metadata:
# # #   name: frontend-service
# # #   namespace: backend
# # #   annotations:
# # #     prometheus.io/scrape: "true"
# # #     prometheus.io/port: "3000"
# # # spec:
# # #   type: LoadBalancer
# # #   ports:
# # #   - port: 80
# # #     targetPort: 3000
# # #   selector:
# # #     app: frontend

# # # ---
# # # apiVersion: v1
# # # kind: PersistentVolumeClaim
# # # metadata:
# # #   name: prometheus-storage
# # #   namespace: backend
# # # spec:
# # #   accessModes:
# # #     - ReadWriteOnce
# # #   resources:
# # #     requests:
# # #       storage: 10Gi
# # #   storageClassName: standard-rwo
# # # ---
# # # # Grafana PVC
# # # apiVersion: v1
# # # kind: PersistentVolumeClaim
# # # metadata:
# # #   name: grafana-storage
# # #   namespace: backend
# # # spec:
# # #   accessModes:
# # #     - ReadWriteOnce
# # #   resources:
# # #     requests:
# # #       storage: 10Gi
# # #   storageClassName: standard-rwo

# # # ---
# # # apiVersion: apps/v1
# # # kind: Deployment
# # # metadata:
# # #   name: prometheus
# # #   namespace: backend
# # # spec:
# # #   replicas: 1
# # #   selector:
# # #     matchLabels:
# # #       app: prometheus
# # #   template:
# # #     metadata:
# # #       labels:
# # #         app: prometheus
# # #     spec:
# # #       serviceAccountName: prometheus
# # #       securityContext:
# # #         fsGroup: 65534
# # #         runAsUser: 65534
# # #         runAsGroup: 65534
# # #         runAsNonRoot: true
# # #       containers:
# # #       - name: prometheus
# # #         image: prom/prometheus:v2.45.0
# # #         args:
# # #           - "--config.file=/etc/prometheus/prometheus.yml"
# # #           - "--storage.tsdb.path=/prometheus"
# # #           - "--web.enable-lifecycle"
# # #           - "--storage.tsdb.retention.time=15d"
# # #           - "--web.enable-admin-api"
# # #         ports:
# # #         - containerPort: 9090
# # #         resources:
# # #           requests:
# # #             memory: "256Mi"
# # #             cpu: "200m"
# # #           limits:
# # #             memory: "512Mi"
# # #             cpu: "400m"
# # #         volumeMounts:
# # #         - name: prometheus-config
# # #           mountPath: /etc/prometheus/
# # #         - name: prometheus-storage
# # #           mountPath: /prometheus
# # #         readinessProbe:
# # #           httpGet:
# # #             path: /-/ready
# # #             port: 9090
# # #           initialDelaySeconds: 30
# # #           timeoutSeconds: 5
# # #           periodSeconds: 10
# # #         livenessProbe:
# # #           httpGet:
# # #             path: /-/healthy
# # #             port: 9090
# # #           initialDelaySeconds: 60
# # #           timeoutSeconds: 5
# # #           periodSeconds: 10
# # #         securityContext:
# # #           allowPrivilegeEscalation: false
# # #           capabilities:
# # #             drop:
# # #               - ALL
# # #       volumes:
# # #       - name: prometheus-config
# # #         configMap:
# # #           name: prometheus-config
# # #       - name: prometheus-storage
# # #         persistentVolumeClaim:
# # #           claimName: prometheus-storage

# # # ---
# # # apiVersion: v1
# # # kind: Service
# # # metadata:
# # #   name: prometheus-service
# # #   namespace: backend
# # # spec:
# # #   selector:
# # #     app: prometheus
# # #   ports:
# # #   - port: 9090
# # #     targetPort: 9090
# # #   type: ClusterIP

# # # ---
# # # # Grafana Deployment
# # # apiVersion: apps/v1
# # # kind: Deployment
# # # metadata:
# # #   name: grafana
# # #   namespace: backend
# # # spec:
# # #   replicas: 1
# # #   selector:
# # #     matchLabels:
# # #       app: grafana
# # #   template:
# # #     metadata:
# # #       labels:
# # #         app: grafana
# # #     spec:
# # #       securityContext:
# # #         fsGroup: 472
# # #         supplementalGroups:
# # #           - 0
# # #       containers:
# # #       - name: grafana
# # #         image: grafana/grafana:10.0.0
# # #         ports:
# # #         - containerPort: 3000
# # #         env:
# # #         - name: GF_SECURITY_ADMIN_PASSWORD
# # #           value: "admin123"
# # #         - name: GF_SECURITY_ADMIN_USER
# # #           value: "admin"
# # #         - name: GF_SERVER_ROOT_URL
# # #           value: "http://grafana.awsaparna123.xyz"
# # #         - name: GF_INSTALL_PLUGINS
# # #           value: "grafana-clock-panel,grafana-simple-json-datasource"
# # #         - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
# # #           value: "/etc/grafana/provisioning/dashboards/k8s-cluster-dashboard.json"
# # #         resources:
# # #           requests:
# # #             memory: "256Mi"
# # #             cpu: "100m"
# # #           limits:
# # #             memory: "512Mi"
# # #             cpu: "200m"
# # #         volumeMounts:
# # #         - name: grafana-storage
# # #           mountPath: /var/lib/grafana
# # #         - name: grafana-dashboards
# # #           mountPath: /etc/grafana/provisioning/dashboards
# # #         readinessProbe:
# # #           httpGet:
# # #             path: /api/health
# # #             port: 3000
# # #           initialDelaySeconds: 30
# # #           timeoutSeconds: 5
# # #         livenessProbe:
# # #           httpGet:
# # #             path: /api/health
# # #             port: 3000
# # #           initialDelaySeconds: 60
# # #           timeoutSeconds: 5
# # #       volumes:
# # #       - name: grafana-storage
# # #         persistentVolumeClaim:
# # #           claimName: grafana-storage
# # #       - name: grafana-dashboards
# # #         configMap:
# # #           name: grafana-dashboards

# # # ---
# # # # Grafana Service
# # # apiVersion: v1
# # # kind: Service
# # # metadata:
# # #   name: grafana-service
# # #   namespace: backend
# # # spec:
# # #   selector:
# # #     app: grafana
# # #   ports:
# # #   - port: 3000
# # #     targetPort: 3000
# # #   type: LoadBalancer
# # apiVersion: v1
# # kind: Namespace
# # metadata:
# #   name: backend

# # ---
# # # Prometheus ServiceAccount
# # apiVersion: v1
# # kind: ServiceAccount
# # metadata:
# #   name: prometheus
# #   namespace: backend

# # ---
# # # MongoDB Secret
# # apiVersion: v1
# # kind: Secret
# # metadata:
# #   name: mongodb-secret
# #   namespace: backend
# # type: Opaque
# # stringData:
# #   MONGO_URL: mongodb+srv://JAYACHANDRAN:KQJrxDn44181NsqT@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

# # ---
# # apiVersion: rbac.authorization.k8s.io/v1
# # kind: ClusterRole
# # metadata:
# #   name: prometheus
# # rules:
# # - apiGroups: [""]
# #   resources:
# #   - nodes
# #   - nodes/proxy
# #   - services
# #   - endpoints
# #   - pods
# #   verbs: ["get", "list", "watch"]
# # - apiGroups:
# #   - extensions
# #   resources:
# #   - ingresses
# #   verbs: ["get", "list", "watch"]
# # - nonResourceURLs: ["/metrics"]
# #   verbs: ["get"]

# # ---
# # apiVersion: rbac.authorization.k8s.io/v1
# # kind: ClusterRoleBinding
# # metadata:
# #   name: prometheus
# # roleRef:
# #   apiGroup: rbac.authorization.k8s.io
# #   kind: ClusterRole
# #   name: prometheus
# # subjects:
# # - kind: ServiceAccount
# #   name: prometheus
# #   namespace: backend

# # ---
# # # MongoDB ConfigMap
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: mongodb-configmap
# #   namespace: backend
# # data:
# #   MONGODB_INITDB_DATABASE: "imdb"

# # ---
# # # Frontend ConfigMap
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: frontend-config
# #   namespace: backend
# # data:
# #   REACT_APP_BACKEND_API: "http://backend.awsaparna123.xyz:5000/api"


# # ---
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: prometheus-config
# #   namespace: backend
# # data:
# #   prometheus.yml: |
# #     global:
# #       scrape_interval: 15s
# #       evaluation_interval: 15s
# #     scrape_configs:
# #       - job_name: 'kubernetes-apiservers'
# #         kubernetes_sd_configs:
# #         - role: endpoints
# #         scheme: https
# #         tls_config:
# #           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
# #         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
# #         relabel_configs:
# #         - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
# #           action: keep
# #           regex: default;kubernetes;https

# #       - job_name: 'kubernetes-nodes'
# #         scheme: https
# #         tls_config:
# #           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
# #         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
# #         kubernetes_sd_configs:
# #         - role: node
# #         relabel_configs:
# #         - action: labelmap
# #           regex: __meta_kubernetes_node_label_(.+)
# #         - target_label: __address__
# #           replacement: kubernetes.default.svc:443
# #         - source_labels: [__meta_kubernetes_node_name]
# #           regex: (.+)
# #           target_label: __metrics_path__
# #           replacement: /api/v1/nodes/${1}/proxy/metrics

# #       - job_name: 'kubernetes-pods'
# #         kubernetes_sd_configs:
# #         - role: pod
# #         relabel_configs:
# #         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
# #           action: keep
# #           regex: true
# #         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
# #           action: replace
# #           target_label: __metrics_path__
# #           regex: (.+)
# #         - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
# #           action: replace
# #           regex: ([^:]+)(?::\d+)?;(\d+)
# #           replacement: $1:$2
# #           target_label: __address__
# #         - action: labelmap
# #           regex: __meta_kubernetes_pod_label_(.+)
# #         - source_labels: [__meta_kubernetes_namespace]
# #           action: replace
# #           target_label: kubernetes_namespace
# #         - source_labels: [__meta_kubernetes_pod_name]
# #           action: replace
# #           target_label: kubernetes_pod_name

# #       - job_name: 'kube-state-metrics'
# #         static_configs:
# #           - targets: ['kube-state-metrics:8080']

# # ---
# # # Grafana ConfigMap for Dashboards
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: grafana-dashboards
# #   namespace: backend
# # data:
# #   k8s-cluster-dashboard.json: |
# #     {
# #       "annotations": {
# #         "list": []
# #       },
# #       "editable": true,
# #       "fiscalYearStartMonth": 0,
# #       "graphTooltip": 0,
# #       "id": 1,
# #       "links": [],
# #       "liveNow": false,
# #       "panels": [
# #         {
# #           "datasource": {
# #             "type": "prometheus",
# #             "uid": "prometheus"
# #           },
# #           "fieldConfig": {
# #             "defaults": {
# #               "color": {
# #                 "mode": "palette-classic"
# #               },
# #               "custom": {
# #                 "axisCenteredZero": false,
# #                 "axisColorMode": "text",
# #                 "axisLabel": "",
# #                 "axisPlacement": "auto",
# #                 "barAlignment": 0,
# #                 "drawStyle": "line",
# #                 "fillOpacity": 20,
# #                 "gradientMode": "none",
# #                 "hideFrom": {
# #                   "legend": false,
# #                   "tooltip": false,
# #                   "viz": false
# #                 },
# #                 "lineInterpolation": "smooth",
# #                 "lineWidth": 2,
# #                 "pointSize": 5,
# #                 "scaleDistribution": {
# #                   "type": "linear"
# #                 },
# #                 "showPoints": "never",
# #                 "spanNulls": false,
# #                 "stacking": {
# #                   "group": "A",
# #                   "mode": "none"
# #                 },
# #                 "thresholdsStyle": {
# #                   "mode": "off"
# #                 }
# #               },
# #               "mappings": [],
# #               "thresholds": {
# #                 "mode": "absolute",
# #                 "steps": [
# #                   {
# #                     "color": "green",
# #                     "value": null
# #                   },
# #                   {
# #                     "color": "red",
# #                     "value": 80
# #                   }
# #                 ]
# #               },
# #               "unit": "percent"
# #             },
# #             "overrides": []
# #           },
# #           "gridPos": {
# #             "h": 8,
# #             "w": 12,
# #             "x": 0,
# #             "y": 0
# #           },
# #           "id": 1,
# #           "options": {
# #             "legend": {
# #               "calcs": ["mean", "max"],
# #               "displayMode": "table",
# #               "placement": "bottom",
# #               "showLegend": true
# #             },
# #             "tooltip": {
# #               "mode": "multi",
# #               "sort": "desc"
# #             }
# #           },
# #           "title": "CPU Usage by Pod",
# #           "type": "timeseries",
# #           "targets": [
# #             {
# #               "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[5m])) by (pod) * 100",
# #               "legendFormat": "{{pod}}"
# #             }
# #           ]
# #         },
# #         {
# #           "datasource": {
# #             "type": "prometheus",
# #             "uid": "prometheus"
# #           },
# #           "fieldConfig": {
# #             "defaults": {
# #               "color": {
# #                 "mode": "palette-classic"
# #               },
# #               "custom": {
# #                 "axisCenteredZero": false,
# #                 "axisColorMode": "text",
# #                 "axisLabel": "",
# #                 "axisPlacement": "auto",
# #                 "barAlignment": 0,
# #                 "drawStyle": "line",
# #                 "fillOpacity": 20,
# #                 "gradientMode": "none",
# #                 "hideFrom": {
# #                   "legend": false,
# #                   "tooltip": false,
# #                   "viz": false
# #                 },
# #                 "lineInterpolation": "smooth",
# #                 "lineWidth": 2,
# #                 "pointSize": 5,
# #                 "scaleDistribution": {
# #                   "type": "linear"
# #                 },
# #                 "showPoints": "never",
# #                 "spanNulls": false,
# #                 "stacking": {
# #                   "group": "A",
# #                   "mode": "none"
# #                 },
# #                 "thresholdsStyle": {
# #                   "mode": "off"
# #                 }
# #               },
# #               "mappings": [],
# #               "thresholds": {
# #                 "mode": "absolute",
# #                 "steps": [
# #                   {
# #                     "color": "green",
# #                     "value": null
# #                   },
# #                   {
# #                     "color": "red",
# #                     "value": 80
# #                   }
# #                 ]
# #               },
# #               "unit": "bytes"
# #             },
# #             "overrides": []
# #           },
# #           "gridPos": {
# #             "h": 8,
# #             "w": 12,
# #             "x": 12,
# #             "y": 0
# #           },
# #           "id": 2,
# #           "options": {
# #             "legend": {
# #               "calcs": ["mean", "max"],
# #               "displayMode": "table",
# #               "placement": "bottom",
# #               "showLegend": true
# #             },
# #             "tooltip": {
# #               "mode": "multi",
# #               "sort": "desc"
# #             }
# #           },
# #           "title": "Memory Usage by Pod",
# #           "type": "timeseries",
# #           "targets": [
# #             {
# #               "expr": "sum(container_memory_working_set_bytes{container!=\"POD\",container!=\"\"}) by (pod)",
# #               "legendFormat": "{{pod}}"
# #             }
# #           ]
# #         },
# #         {
# #           "datasource": {
# #             "type": "prometheus",
# #             "uid": "prometheus"
# #           },
# #           "fieldConfig": {
# #             "defaults": {
# #               "color": {
# #                 "mode": "palette-classic"
# #               },
# #               "custom": {
# #                 "axisCenteredZero": false,
# #                 "axisColorMode": "text",
# #                 "axisLabel": "",
# #                 "axisPlacement": "auto",
# #                 "barAlignment": 0,
# #                 "drawStyle": "line",
# #                 "fillOpacity": 20,
# #                 "gradientMode": "none",
# #                 "hideFrom": {
# #                   "legend": false,
# #                   "tooltip": false,
# #                   "viz": false
# #                 },
# #                 "lineInterpolation": "smooth",
# #                 "lineWidth": 2,
# #                 "pointSize": 5,
# #                 "scaleDistribution": {
# #                   "type": "linear"
# #                 },
# #                 "showPoints": "never",
# #                 "spanNulls": false,
# #                 "stacking": {
# #                   "group": "A",
# #                   "mode": "none"
# #                 },
# #                 "thresholdsStyle": {
# #                   "mode": "off"
# #                 }
# #               },
# #               "mappings": [],
# #               "thresholds": {
# #                 "mode": "absolute",
# #                 "steps": [
# #                   {
# #                     "color": "green",
# #                     "value": null
# #                   }
# #                 ]
# #               },
# #               "unit": "Bps"
# #             },
# #             "overrides": []
# #           },
# #           "gridPos": {
# #             "h": 8,
# #             "w": 12,
# #             "x": 0,
# #             "y": 8
# #           },
# #           "id": 3,
# #           "options": {
# #             "legend": {
# #               "calcs": ["mean", "max"],
# #               "displayMode": "table",
# #               "placement": "bottom",
# #               "showLegend": true
# #             },
# #             "tooltip": {
# #               "mode": "multi",
# #               "sort": "desc"
# #             }
# #           },
# #           "title": "Network I/O",
# #           "type": "timeseries",
# #           "targets": [
# #             {
# #               "expr": "sum(rate(container_network_receive_bytes_total[5m])) by (pod)",
# #               "legendFormat": "{{pod}} Received"
# #             },
# #             {
# #               "expr": "sum(rate(container_network_transmit_bytes_total[5m])) by (pod)",
# #               "legendFormat": "{{pod}} Transmitted"
# #             }
# #           ]
# #         },
# #         {
# #           "datasource": {
# #             "type": "prometheus",
# #             "uid": "prometheus"
# #           },
# #           "fieldConfig": {
# #             "defaults": {
# #               "color": {
# #                 "mode": "palette-classic"
# #               },
# #               "custom": {
# #                 "axisCenteredZero": false,
# #                 "axisColorMode": "text",
# #                 "axisLabel": "",
# #                 "axisPlacement": "auto",
# #                 "barAlignment": 0,
# #                 "drawStyle": "line",
# #                 "fillOpacity": 20,
# #                 "gradientMode": "none",
# #                 "hideFrom": {
# #                   "legend": false,
# #                   "tooltip": false,
# #                   "viz": false
# #                 },
# #                 "lineInterpolation": "smooth",
# #                 "lineWidth": 2,
# #                 "pointSize": 5,
# #                 "scaleDistribution": {
# #                   "type": "linear"
# #                 },
# #                 "showPoints": "never",
# #                 "spanNulls": false,
# #                 "stacking": {
# #                   "group": "A",
# #                   "mode": "none"
# #                 },
# #                 "thresholdsStyle": {
# #                   "mode": "off"
# #                 }
# #               },
# #               "mappings": [],
# #               "thresholds": {
# #                 "mode": "absolute",
# #                 "steps": [
# #                   {
# #                     "color": "green",
# #                     "value": null
# #                   }
# #                 ]
# #               }
# #             },
# #             "overrides": []
# #           },
# #           "gridPos": {
# #             "h": 8,
# #             "w": 12,
# #             "x": 12,
# #             "y": 8
# #           },
# #           "id": 4,
# #           "options": {
# #             "legend": {
# #               "calcs": ["mean", "max"],
# #               "displayMode": "table",
# #               "placement": "bottom",
# #               "showLegend": true
# #             },
# #             "tooltip": {
# #               "mode": "multi",
# #               "sort": "desc"
# #             }
# #           },
# #           "title": "Pod Status",
# #           "type": "timeseries",
# #           "targets": [
# #             {
# #               "expr": "kube_pod_status_phase{phase=~\"Running|Pending|Failed|Succeeded\"} > 0",
# #               "legendFormat": "{{phase}}"
# #             }
# #           ]
# #         }
# #       ],
# #       "refresh": "10s",
# #       "schemaVersion": 38,
# #       "style": "dark",
# #       "tags": [],
# #       "templating": {
# #         "list": []
# #       },
# #       "time": {
# #         "from": "now-1h",
# #         "to": "now"
# #       },
# #       "timepicker": {},
# #       "timezone": "",
# #       "title": "Kubernetes Cluster Monitoring",
# #       "uid": "k8s-cluster-monitoring",
# #       "version": 1,
# #       "weekStart": ""
# #     }
# # ---
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: grafana-datasources
# #   namespace: backend
# # data:
# #   datasources.yaml: |
# #     apiVersion: 1
# #     deleteDatasources:
# #       - name: Prometheus
# #         orgId: 1

# #     datasources:
# #       - name: Prometheus
# #         type: prometheus
# #         access: proxy
# #         url: http://prometheus-service:9090
# #         isDefault: true
# #         version: 1
# #         editable: true
# #         jsonData:
# #           timeInterval: "15s"
# #           queryTimeout: "30s"
# #           httpMethod: POST
# #           manageAlerts: true
# #           prometheusType: Prometheus
# #           prometheusVersion: 2.45.0
# #           exemplarTraceIdDestinations:
# #             - name: trace_id
# #               datasourceUid: prometheus
# #           alertmanagerUid: alertmanager
# #         secureJsonData: {}
# #         uid: prometheus
# #         orgId: 1

# #       - name: Loki
# #         type: loki
# #         access: proxy
# #         url: http://loki:3100
# #         jsonData:
# #           maxLines: 1000
# #           derivedFields:
# #             - datasourceUid: prometheus
# #               matcherRegex: "trace_id=(\\w+)"
# #               name: TraceID
# #               url: "$${__value.raw}"
# #         version: 1
# #         editable: true
# #         orgId: 1

# # ---
# # # MongoDB PVC
# # apiVersion: v1
# # kind: PersistentVolumeClaim
# # metadata:
# #   name: mongodb-data
# #   namespace: backend
# # spec:
# #   accessModes:
# #     - ReadWriteOnce
# #   resources:
# #     requests:
# #       storage: 1Gi
# #   storageClassName: standard-rwo

# # ---
# # # MongoDB Deployment
# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: mongodb
# #   namespace: backend
# # spec:
# #   replicas: 1
# #   selector:
# #     matchLabels:
# #       app: mongodb
# #   template:
# #     metadata:
# #       labels:
# #         app: mongodb
# #       annotations:
# #         prometheus.io/scrape: "true"
# #         prometheus.io/port: "27017"
# #     spec:
# #       securityContext:
# #         fsGroup: 999
# #         runAsUser: 999
# #         runAsNonRoot: true
# #       containers:
# #       - name: mongodb
# #         image: mongo:6.0
# #         ports:
# #         - containerPort: 27017
# #         env:
# #         - name: MONGO_INITDB_DATABASE
# #           valueFrom:
# #             configMapKeyRef:
# #               name: mongodb-configmap
# #               key: MONGODB_INITDB_DATABASE
# #         resources:
# #           requests:
# #             memory: "512Mi"
# #             cpu: "250m"
# #           limits:
# #             memory: "1Gi"
# #             cpu: "500m"
# #         volumeMounts:
# #         - name: mongodb-data
# #           mountPath: /data/db
# #         - name: mongodb-tmp
# #           mountPath: /tmp
# #       volumes:
# #       - name: mongodb-data
# #         persistentVolumeClaim:
# #           claimName: mongodb-data
# #       - name: mongodb-tmp
# #         emptyDir: {}

# # ---
# # # MongoDB Service
# # apiVersion: v1
# # kind: Service
# # metadata:
# #   name: mongodb-service
# #   namespace: backend
# #   annotations:
# #     prometheus.io/scrape: "true"
# #     prometheus.io/port: "27017"
# # spec:
# #   type: ClusterIP
# #   ports:
# #   - port: 27017
# #     targetPort: 27017
# #   selector:
# #     app: mongodb

# # ---
# # # Backend Deployment
# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: backend-deployment
# #   namespace: backend
# # spec:
# #   replicas: 1
# #   selector:
# #     matchLabels:
# #       app: backend
# #   template:
# #     metadata:
# #       labels:
# #         app: backend
# #       annotations:
# #         prometheus.io/scrape: "true"
# #         prometheus.io/port: "5000"
# #         prometheus.io/path: "/metrics"
# #     spec:
# #       containers:
# #       - name: backend
# #         image: jai3747/imdb-clone-backend:latest
# #         imagePullPolicy: Always
# #         ports:
# #         - containerPort: 5000
# #         env:
# #         - name: PORT
# #           value: "5000"
# #         - name: NODE_ENV
# #           value: "production"
# #         - name: MONGO_URL
# #           valueFrom:
# #             secretKeyRef:
# #               name: mongodb-secret
# #               key: MONGO_URL
# #         readinessProbe:
# #           httpGet:
# #             path: /api/health
# #             port: 5000
# #           initialDelaySeconds: 30
# #           periodSeconds: 10
# #           timeoutSeconds: 5
# #           failureThreshold: 3
# #         livenessProbe:
# #           httpGet:
# #             path: /api/health
# #             port: 5000
# #           initialDelaySeconds: 60
# #           periodSeconds: 20
# #           timeoutSeconds: 5
# #           failureThreshold: 3
# #         resources:
# #           requests:
# #             memory: "256Mi"
# #             cpu: "100m"
# #           limits:
# #             memory: "512Mi"
# #             cpu: "200m"
# #         volumeMounts:
# #         - name: tmp
# #           mountPath: /tmp
# #       volumes:
# #       - name: tmp
# #         emptyDir: {}

# # ---
# # # Backend Service
# # apiVersion: v1
# # kind: Service
# # metadata:
# #   name: backend-service
# #   namespace: backend
# #   annotations:
# #     prometheus.io/scrape: "true"
# #     prometheus.io/port: "5000"
# # spec:
# #   type: LoadBalancer
# #   ports:
# #   - port: 5000
# #     targetPort: 5000
# #   selector:
# #     app: backend

# # ---
# # # Frontend Deployment (Completed)
# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: frontend-deployment
# #   namespace: backend
# # spec:
# #   replicas: 1
# #   selector:
# #     matchLabels:
# #       app: frontend
# #   template:
# #     metadata:
# #       labels:
# #         app: frontend
# #       annotations:
# #         prometheus.io/scrape: "true"
# #         prometheus.io/port: "3000"
# #     spec:
# #       containers:
# #       - name: frontend
# #         image: jai3747/imdb-clone-frontend:latest
# #         imagePullPolicy: Always
# #         ports:
# #         - containerPort: 3000
# #         env:
# #         - name: HOST
# #           value: "0.0.0.0"
# #         - name: PORT
# #           value: "3000"
# #         - name: REACT_APP_BACKEND_API
# #           valueFrom:
# #             configMapKeyRef:
# #               name: frontend-config
# #               key: REACT_APP_BACKEND_API
# #         readinessProbe:
# #           httpGet:
# #             path: /
# #             port: 3000
# #           initialDelaySeconds: 30
# #           periodSeconds: 10
# #           timeoutSeconds: 5
# #           failureThreshold: 3
# #         livenessProbe:
# #           httpGet:
# #             path: /
# #             port: 3000
# #           initialDelaySeconds: 60
# #           periodSeconds: 20
# #           timeoutSeconds: 5
# #           failureThreshold: 3
# #         resources:
# #           requests:
# #             memory: "256Mi"
# #             cpu: "100m"
# #           limits:
# #             memory: "512Mi"
# #             cpu: "200m"
# #         volumeMounts:
# #         - name: tmp
# #           mountPath: /tmp
# #       volumes:
# #       - name: tmp
# #         emptyDir: {}

# # ---
# # # Frontend Service
# # apiVersion: v1
# # kind: Service
# # metadata:
# #   name: frontend-service
# #   namespace: backend
# #   annotations:
# #     prometheus.io/scrape: "true"
# #     prometheus.io/port: "3000"
# # spec:
# #   type: LoadBalancer
# #   ports:
# #   - port: 80
# #     targetPort: 3000
# #   selector:
# #     app: frontend

# # ---
# # apiVersion: v1
# # kind: PersistentVolumeClaim
# # metadata:
# #   name: prometheus-storage
# #   namespace: backend
# # spec:
# #   accessModes:
# #     - ReadWriteOnce
# #   resources:
# #     requests:
# #       storage: 10Gi
# #   storageClassName: standard-rwo
# # ---
# # # Grafana PVC
# # apiVersion: v1
# # kind: PersistentVolumeClaim
# # metadata:
# #   name: grafana-storage
# #   namespace: backend
# # spec:
# #   accessModes:
# #     - ReadWriteOnce
# #   resources:
# #     requests:
# #       storage: 10Gi
# #   storageClassName: standard-rwo

# # ---
# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: prometheus
# #   namespace: backend
# # spec:
# #   replicas: 1
# #   selector:
# #     matchLabels:
# #       app: prometheus
# #   template:
# #     metadata:
# #       labels:
# #         app: prometheus
# #     spec:
# #       serviceAccountName: prometheus
# #       securityContext:
# #         fsGroup: 65534
# #         runAsUser: 65534
# #         runAsGroup: 65534
# #         runAsNonRoot: true
# #       containers:
# #       - name: prometheus
# #         image: prom/prometheus:v2.45.0
# #         args:
# #           - "--config.file=/etc/prometheus/prometheus.yml"
# #           - "--storage.tsdb.path=/prometheus"
# #           - "--web.enable-lifecycle"
# #           - "--storage.tsdb.retention.time=15d"
# #           - "--web.enable-admin-api"
# #         ports:
# #         - containerPort: 9090
# #         resources:
# #           requests:
# #             memory: "256Mi"
# #             cpu: "200m"
# #           limits:
# #             memory: "512Mi"
# #             cpu: "400m"
# #         volumeMounts:
# #         - name: prometheus-config
# #           mountPath: /etc/prometheus/
# #         - name: prometheus-storage
# #           mountPath: /prometheus
# #         readinessProbe:
# #           httpGet:
# #             path: /-/ready
# #             port: 9090
# #           initialDelaySeconds: 30
# #           timeoutSeconds: 5
# #           periodSeconds: 10
# #         livenessProbe:
# #           httpGet:
# #             path: /-/healthy
# #             port: 9090
# #           initialDelaySeconds: 60
# #           timeoutSeconds: 5
# #           periodSeconds: 10
# #         securityContext:
# #           allowPrivilegeEscalation: false
# #           capabilities:
# #             drop:
# #               - ALL
# #       volumes:
# #       - name: prometheus-config
# #         configMap:
# #           name: prometheus-config
# #       - name: prometheus-storage
# #         persistentVolumeClaim:
# #           claimName: prometheus-storage

# # ---
# # apiVersion: v1
# # kind: Service
# # metadata:
# #   name: prometheus-service
# #   namespace: backend
# # spec:
# #   selector:
# #     app: prometheus
# #   ports:
# #   - port: 9090
# #     targetPort: 9090
# #   type: ClusterIP

# # ---
# # # Update Grafana Deployment to use new configs
# # apiVersion: apps/v1
# # kind: Deployment
# # metadata:
# #   name: grafana
# #   namespace: backend
# # spec:
# #   replicas: 1
# #   selector:
# #     matchLabels:
# #       app: grafana
# #   template:
# #     metadata:
# #       labels:
# #         app: grafana
# #     spec:
# #       securityContext:
# #         fsGroup: 472
# #         supplementalGroups:
# #           - 0
# #       containers:
# #       - name: grafana
# #         image: grafana/grafana:10.0.0
# #         ports:
# #         - containerPort: 3000
# #         env:
# #         - name: GF_SECURITY_ADMIN_PASSWORD
# #           value: "admin123"
# #         - name: GF_SECURITY_ADMIN_USER
# #           value: "admin"
# #         - name: GF_SERVER_ROOT_URL
# #           value: "http://grafana.awsaparna123.xyz"
# #         - name: GF_INSTALL_PLUGINS
# #           value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
# #         resources:
# #           requests:
# #             memory: "256Mi"
# #             cpu: "100m"
# #           limits:
# #             memory: "512Mi"
# #             cpu: "200m"
# #         volumeMounts:
# #         - name: grafana-storage
# #           mountPath: /var/lib/grafana
# #         - name: grafana-datasources
# #           mountPath: /etc/grafana/provisioning/datasources
# #         - name: grafana-providers
# #           mountPath: /etc/grafana/provisioning/dashboards/provider.yaml
# #           subPath: provider.yaml
# #         - name: grafana-dashboards
# #           mountPath: /etc/grafana/provisioning/dashboards
# #         - name: grafana-config
# #           mountPath: /etc/grafana/grafana.ini
# #           subPath: grafana.ini
# #         readinessProbe:
# #           httpGet:
# #             path: /api/health
# #             port: 3000
# #           initialDelaySeconds: 30
# #           timeoutSeconds: 5
# #         livenessProbe:
# #           httpGet:
# #             path: /api/health
# #             port: 3000
# #           initialDelaySeconds: 60
# #           timeoutSeconds: 5
# #       volumes:
# #       - name: grafana-storage
# #         persistentVolumeClaim:
# #           claimName: grafana-storage
# #       - name: grafana-datasources
# #         configMap:
# #           name: grafana-datasources
# #       - name: grafana-providers
# #         configMap:
# #           name: grafana-provider
# #       - name: grafana-dashboards
# #         configMap:
# #           name: grafana-dashboards
# #       - name: grafana-config
# #         configMap:
# #           name: grafana-config

# # ---
# # # Grafana Service
# # apiVersion: v1
# # kind: Service
# # metadata:
# #   name: grafana-service
# #   namespace: backend
# # spec:
# #   selector:
# #     app: grafana
# #   ports:
# #   - port: 3000
# #     targetPort: 3000
# #   type: LoadBalancer
# # ---
# # # Grafana Provider Configuration
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: grafana-provider
# #   namespace: backend
# # data:
# #   provider.yaml: |
# #     apiVersion: 1
# #     providers:
# #       - name: 'default'
# #         orgId: 1
# #         folder: ''
# #         type: file
# #         disableDeletion: false
# #         editable: true
# #         updateIntervalSeconds: 10
# #         allowUiUpdates: true
# #         options:
# #           path: /etc/grafana/provisioning/dashboards
# #           foldersFromFilesStructure: true
# # ---

# # # Grafana Configuration
# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: grafana-config
# #   namespace: backend
# # data:
# #   grafana.ini: |
# #     [server]
# #     root_url = http://grafana.awsaparna123.xyz
# #     serve_from_sub_path = true

# #     [auth]
# #     disable_login_form = false
    
# #     [auth.anonymous]
# #     enabled = true
# #     org_role = Viewer
    
# #     [dashboards]
# #     min_refresh_interval = 5s
# #     default_home_dashboard_path = /etc/grafana/provisioning/dashboards/k8s-cluster-dashboard.json
    
# #     [users]
# #     default_theme = dark
# #     auto_assign_org_role = Editor
    
# #     [alerting]
# #     enabled = true
# #     execute_alerts = true
    
# #     [unified_alerting]
# #     enabled = true
    
# #     [security]
# #     allow_embedding = true
# #     cookie_secure = false
# #     cookie_samesite = lax
    
# #     [metrics]
# #     enabled = true
# #     basic_auth_username = metrics
# #     basic_auth_password = metrics123

# #     [log]
# #     mode = console
# #     level = info
    
# #     [paths]
# #     data = /var/lib/grafana
# #     logs = /var/log/grafana
# #     plugins = /var/lib/grafana/plugins
# #     provisioning = /etc/grafana/provisioning
# # ---

# apiVersion: v1
# kind: Namespace
# metadata:
#   name: backend

# ---
# # Prometheus ServiceAccount
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: prometheus
#   namespace: backend

# ---
# # MongoDB Secret
# apiVersion: v1
# kind: Secret
# metadata:
#   name: mongodb-secret
#   namespace: backend
# type: Opaque
# stringData:
#   MONGO_URL: mongodb+srv://JAYACHANDRAN:KQJrxDn44181NsqT@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: prometheus
# rules:
# - apiGroups: [""]
#   resources:
#   - nodes
#   - nodes/proxy
#   - services
#   - endpoints
#   - pods
#   verbs: ["get", "list", "watch"]
# - apiGroups:
#   - extensions
#   resources:
#   - ingresses
#   verbs: ["get", "list", "watch"]
# - nonResourceURLs: ["/metrics"]
#   verbs: ["get"]

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: prometheus
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: prometheus
# subjects:
# - kind: ServiceAccount
#   name: prometheus
#   namespace: backend

# ---
# # MongoDB ConfigMap
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: mongodb-configmap
#   namespace: backend
# data:
#   MONGODB_INITDB_DATABASE: "imdb"

# ---
# # Frontend ConfigMap
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: frontend-config
#   namespace: backend
# data:
#   REACT_APP_BACKEND_API: "http://backend.awsaparna123.xyz:5000/api"


# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: prometheus-config
#   namespace: backend
# data:
#   prometheus.yml: |
#     global:
#       scrape_interval: 15s
#       evaluation_interval: 15s
#     scrape_configs:
#       - job_name: 'kubernetes-apiservers'
#         kubernetes_sd_configs:
#         - role: endpoints
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
#           action: keep
#           regex: default;kubernetes;https

#       - job_name: 'kubernetes-nodes'
#         scheme: https
#         tls_config:
#           ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#         bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#         kubernetes_sd_configs:
#         - role: node
#         relabel_configs:
#         - action: labelmap
#           regex: __meta_kubernetes_node_label_(.+)
#         - target_label: __address__
#           replacement: kubernetes.default.svc:443
#         - source_labels: [__meta_kubernetes_node_name]
#           regex: (.+)
#           target_label: __metrics_path__
#           replacement: /api/v1/nodes/${1}/proxy/metrics

#       - job_name: 'kubernetes-pods'
#         kubernetes_sd_configs:
#         - role: pod
#         relabel_configs:
#         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#           action: keep
#           regex: true
#         - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#           action: replace
#           target_label: __metrics_path__
#           regex: (.+)
#         - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#           action: replace
#           regex: ([^:]+)(?::\d+)?;(\d+)
#           replacement: $1:$2
#           target_label: __address__
#         - action: labelmap
#           regex: __meta_kubernetes_pod_label_(.+)
#         - source_labels: [__meta_kubernetes_namespace]
#           action: replace
#           target_label: kubernetes_namespace
#         - source_labels: [__meta_kubernetes_pod_name]
#           action: replace
#           target_label: kubernetes_pod_name

#       - job_name: 'kube-state-metrics'
#         static_configs:
#           - targets: ['kube-state-metrics:8080']

# ---
# # Grafana ConfigMap for Dashboards
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: grafana-dashboards
#   namespace: backend
# data:
#   k8s-cluster-dashboard.json: |
#     {
#       "annotations": {
#         "list": []
#       },
#       "editable": true,
#       "fiscalYearStartMonth": 0,
#       "graphTooltip": 0,
#       "id": 1,
#       "links": [],
#       "liveNow": false,
#       "panels": [
#         {
#           "datasource": {
#             "type": "prometheus",
#             "uid": "prometheus"
#           },
#           "fieldConfig": {
#             "defaults": {
#               "color": {
#                 "mode": "palette-classic"
#               },
#               "custom": {
#                 "axisCenteredZero": false,
#                 "axisColorMode": "text",
#                 "axisLabel": "",
#                 "axisPlacement": "auto",
#                 "barAlignment": 0,
#                 "drawStyle": "line",
#                 "fillOpacity": 20,
#                 "gradientMode": "none",
#                 "hideFrom": {
#                   "legend": false,
#                   "tooltip": false,
#                   "viz": false
#                 },
#                 "lineInterpolation": "smooth",
#                 "lineWidth": 2,
#                 "pointSize": 5,
#                 "scaleDistribution": {
#                   "type": "linear"
#                 },
#                 "showPoints": "never",
#                 "spanNulls": false,
#                 "stacking": {
#                   "group": "A",
#                   "mode": "none"
#                 },
#                 "thresholdsStyle": {
#                   "mode": "off"
#                 }
#               },
#               "mappings": [],
#               "thresholds": {
#                 "mode": "absolute",
#                 "steps": [
#                   {
#                     "color": "green",
#                     "value": null
#                   },
#                   {
#                     "color": "red",
#                     "value": 80
#                   }
#                 ]
#               },
#               "unit": "percent"
#             },
#             "overrides": []
#           },
#           "gridPos": {
#             "h": 8,
#             "w": 12,
#             "x": 0,
#             "y": 0
#           },
#           "id": 1,
#           "options": {
#             "legend": {
#               "calcs": ["mean", "max"],
#               "displayMode": "table",
#               "placement": "bottom",
#               "showLegend": true
#             },
#             "tooltip": {
#               "mode": "multi",
#               "sort": "desc"
#             }
#           },
#           "title": "CPU Usage by Pod",
#           "type": "timeseries",
#           "targets": [
#             {
#               "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[5m])) by (pod) * 100",
#               "legendFormat": "{{pod}}"
#             }
#           ]
#         },
#         {
#           "datasource": {
#             "type": "prometheus",
#             "uid": "prometheus"
#           },
#           "fieldConfig": {
#             "defaults": {
#               "color": {
#                 "mode": "palette-classic"
#               },
#               "custom": {
#                 "axisCenteredZero": false,
#                 "axisColorMode": "text",
#                 "axisLabel": "",
#                 "axisPlacement": "auto",
#                 "barAlignment": 0,
#                 "drawStyle": "line",
#                 "fillOpacity": 20,
#                 "gradientMode": "none",
#                 "hideFrom": {
#                   "legend": false,
#                   "tooltip": false,
#                   "viz": false
#                 },
#                 "lineInterpolation": "smooth",
#                 "lineWidth": 2,
#                 "pointSize": 5,
#                 "scaleDistribution": {
#                   "type": "linear"
#                 },
#                 "showPoints": "never",
#                 "spanNulls": false,
#                 "stacking": {
#                   "group": "A",
#                   "mode": "none"
#                 },
#                 "thresholdsStyle": {
#                   "mode": "off"
#                 }
#               },
#               "mappings": [],
#               "thresholds": {
#                 "mode": "absolute",
#                 "steps": [
#                   {
#                     "color": "green",
#                     "value": null
#                   },
#                   {
#                     "color": "red",
#                     "value": 80
#                   }
#                 ]
#               },
#               "unit": "bytes"
#             },
#             "overrides": []
#           },
#           "gridPos": {
#             "h": 8,
#             "w": 12,
#             "x": 12,
#             "y": 0
#           },
#           "id": 2,
#           "options": {
#             "legend": {
#               "calcs": ["mean", "max"],
#               "displayMode": "table",
#               "placement": "bottom",
#               "showLegend": true
#             },
#             "tooltip": {
#               "mode": "multi",
#               "sort": "desc"
#             }
#           },
#           "title": "Memory Usage by Pod",
#           "type": "timeseries",
#           "targets": [
#             {
#               "expr": "sum(container_memory_working_set_bytes{container!=\"POD\",container!=\"\"}) by (pod)",
#               "legendFormat": "{{pod}}"
#             }
#           ]
#         },
#         {
#           "datasource": {
#             "type": "prometheus",
#             "uid": "prometheus"
#           },
#           "fieldConfig": {
#             "defaults": {
#               "color": {
#                 "mode": "palette-classic"
#               },
#               "custom": {
#                 "axisCenteredZero": false,
#                 "axisColorMode": "text",
#                 "axisLabel": "",
#                 "axisPlacement": "auto",
#                 "barAlignment": 0,
#                 "drawStyle": "line",
#                 "fillOpacity": 20,
#                 "gradientMode": "none",
#                 "hideFrom": {
#                   "legend": false,
#                   "tooltip": false,
#                   "viz": false
#                 },
#                 "lineInterpolation": "smooth",
#                 "lineWidth": 2,
#                 "pointSize": 5,
#                 "scaleDistribution": {
#                   "type": "linear"
#                 },
#                 "showPoints": "never",
#                 "spanNulls": false,
#                 "stacking": {
#                   "group": "A",
#                   "mode": "none"
#                 },
#                 "thresholdsStyle": {
#                   "mode": "off"
#                 }
#               },
#               "mappings": [],
#               "thresholds": {
#                 "mode": "absolute",
#                 "steps": [
#                   {
#                     "color": "green",
#                     "value": null
#                   }
#                 ]
#               },
#               "unit": "Bps"
#             },
#             "overrides": []
#           },
#           "gridPos": {
#             "h": 8,
#             "w": 12,
#             "x": 0,
#             "y": 8
#           },
#           "id": 3,
#           "options": {
#             "legend": {
#               "calcs": ["mean", "max"],
#               "displayMode": "table",
#               "placement": "bottom",
#               "showLegend": true
#             },
#             "tooltip": {
#               "mode": "multi",
#               "sort": "desc"
#             }
#           },
#           "title": "Network I/O",
#           "type": "timeseries",
#           "targets": [
#             {
#               "expr": "sum(rate(container_network_receive_bytes_total[5m])) by (pod)",
#               "legendFormat": "{{pod}} Received"
#             },
#             {
#               "expr": "sum(rate(container_network_transmit_bytes_total[5m])) by (pod)",
#               "legendFormat": "{{pod}} Transmitted"
#             }
#           ]
#         },
#         {
#           "datasource": {
#             "type": "prometheus",
#             "uid": "prometheus"
#           },
#           "fieldConfig": {
#             "defaults": {
#               "color": {
#                 "mode": "palette-classic"
#               },
#               "custom": {
#                 "axisCenteredZero": false,
#                 "axisColorMode": "text",
#                 "axisLabel": "",
#                 "axisPlacement": "auto",
#                 "barAlignment": 0,
#                 "drawStyle": "line",
#                 "fillOpacity": 20,
#                 "gradientMode": "none",
#                 "hideFrom": {
#                   "legend": false,
#                   "tooltip": false,
#                   "viz": false
#                 },
#                 "lineInterpolation": "smooth",
#                 "lineWidth": 2,
#                 "pointSize": 5,
#                 "scaleDistribution": {
#                   "type": "linear"
#                 },
#                 "showPoints": "never",
#                 "spanNulls": false,
#                 "stacking": {
#                   "group": "A",
#                   "mode": "none"
#                 },
#                 "thresholdsStyle": {
#                   "mode": "off"
#                 }
#               },
#               "mappings": [],
#               "thresholds": {
#                 "mode": "absolute",
#                 "steps": [
#                   {
#                     "color": "green",
#                     "value": null
#                   }
#                 ]
#               }
#             },
#             "overrides": []
#           },
#           "gridPos": {
#             "h": 8,
#             "w": 12,
#             "x": 12,
#             "y": 8
#           },
#           "id": 4,
#           "options": {
#             "legend": {
#               "calcs": ["mean", "max"],
#               "displayMode": "table",
#               "placement": "bottom",
#               "showLegend": true
#             },
#             "tooltip": {
#               "mode": "multi",
#               "sort": "desc"
#             }
#           },
#           "title": "Pod Status",
#           "type": "timeseries",
#           "targets": [
#             {
#               "expr": "kube_pod_status_phase{phase=~\"Running|Pending|Failed|Succeeded\"} > 0",
#               "legendFormat": "{{phase}}"
#             }
#           ]
#         }
#       ],
#       "refresh": "10s",
#       "schemaVersion": 38,
#       "style": "dark",
#       "tags": [],
#       "templating": {
#         "list": []
#       },
#       "time": {
#         "from": "now-1h",
#         "to": "now"
#       },
#       "timepicker": {},
#       "timezone": "",
#       "title": "Kubernetes Cluster Monitoring",
#       "uid": "k8s-cluster-monitoring",
#       "version": 1,
#       "weekStart": ""
#     }
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: grafana-datasources
#   namespace: backend
# data:
#   datasources.yaml: |
#     apiVersion: 1
#     deleteDatasources:
#       - name: Prometheus
#         orgId: 1

#     datasources:
#       - name: Prometheus
#         type: prometheus
#         access: proxy
#         url: http://prometheus-service:9090
#         isDefault: true
#         version: 1
#         editable: true
#         jsonData:
#           timeInterval: "15s"
#           queryTimeout: "30s"
#           httpMethod: POST
#           manageAlerts: true
#           prometheusType: Prometheus
#           prometheusVersion: 2.45.0
#           exemplarTraceIdDestinations:
#             - name: trace_id
#               datasourceUid: prometheus
#           alertmanagerUid: alertmanager
#         secureJsonData: {}
#         uid: prometheus
#         orgId: 1

#       - name: Loki
#         type: loki
#         access: proxy
#         url: http://loki:3100
#         jsonData:
#           maxLines: 1000
#           derivedFields:
#             - datasourceUid: prometheus
#               matcherRegex: "trace_id=(\\w+)"
#               name: TraceID
#               url: "$${__value.raw}"
#         version: 1
#         editable: true
#         orgId: 1

# ---
# # MongoDB PVC
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mongodb-data
#   namespace: backend
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi
#   storageClassName: standard-rwo

# ---
# # MongoDB Deployment
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mongodb
#   namespace: backend
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mongodb
#   template:
#     metadata:
#       labels:
#         app: mongodb
#       annotations:
#         prometheus.io/scrape: "true"
#         prometheus.io/port: "27017"
#     spec:
#       securityContext:
#         fsGroup: 999
#         runAsUser: 999
#         runAsNonRoot: true
#       containers:
#       - name: mongodb
#         image: mongo:6.0
#         ports:
#         - containerPort: 27017
#         env:
#         - name: MONGO_INITDB_DATABASE
#           valueFrom:
#             configMapKeyRef:
#               name: mongodb-configmap
#               key: MONGODB_INITDB_DATABASE
#         resources:
#           requests:
#             memory: "512Mi"
#             cpu: "250m"
#           limits:
#             memory: "1Gi"
#             cpu: "500m"
#         volumeMounts:
#         - name: mongodb-data
#           mountPath: /data/db
#         - name: mongodb-tmp
#           mountPath: /tmp
#       volumes:
#       - name: mongodb-data
#         persistentVolumeClaim:
#           claimName: mongodb-data
#       - name: mongodb-tmp
#         emptyDir: {}

# ---
# # MongoDB Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-service
#   namespace: backend
#   annotations:
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "27017"
# spec:
#   type: ClusterIP
#   ports:
#   - port: 27017
#     targetPort: 27017
#   selector:
#     app: mongodb

# ---
# # Backend Deployment
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: backend-deployment
#   namespace: backend
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: backend
#   template:
#     metadata:
#       labels:
#         app: backend
#       annotations:
#         prometheus.io/scrape: "true"
#         prometheus.io/port: "5000"
#         prometheus.io/path: "/metrics"
#     spec:
#       containers:
#       - name: backend
#         image: jai3747/imdb-clone-backend:latest
#         imagePullPolicy: Always
#         ports:
#         - containerPort: 5000
#         env:
#         - name: PORT
#           value: "5000"
#         - name: NODE_ENV
#           value: "production"
#         - name: MONGO_URL
#           valueFrom:
#             secretKeyRef:
#               name: mongodb-secret
#               key: MONGO_URL
#         readinessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 30
#           periodSeconds: 10
#           timeoutSeconds: 5
#           failureThreshold: 3
#         livenessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 60
#           periodSeconds: 20
#           timeoutSeconds: 5
#           failureThreshold: 3
#         resources:
#           requests:
#             memory: "256Mi"
#             cpu: "100m"
#           limits:
#             memory: "512Mi"
#             cpu: "200m"
#         volumeMounts:
#         - name: tmp
#           mountPath: /tmp
#       volumes:
#       - name: tmp
#         emptyDir: {}

# ---
# # Backend Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: backend-service
#   namespace: backend
#   annotations:
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "5000"
# spec:
#   type: LoadBalancer
#   ports:
#   - port: 5000
#     targetPort: 5000
#   selector:
#     app: backend

# ---
# # Frontend Deployment (Completed)
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: frontend-deployment
#   namespace: backend
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: frontend
#   template:
#     metadata:
#       labels:
#         app: frontend
#       annotations:
#         prometheus.io/scrape: "true"
#         prometheus.io/port: "3000"
#     spec:
#       containers:
#       - name: frontend
#         image: jai3747/imdb-clone-frontend:latest
#         imagePullPolicy: Always
#         ports:
#         - containerPort: 3000
#         env:
#         - name: HOST
#           value: "0.0.0.0"
#         - name: PORT
#           value: "3000"
#         - name: REACT_APP_BACKEND_API
#           valueFrom:
#             configMapKeyRef:
#               name: frontend-config
#               key: REACT_APP_BACKEND_API
#         readinessProbe:
#           httpGet:
#             path: /
#             port: 3000
#           initialDelaySeconds: 30
#           periodSeconds: 10
#           timeoutSeconds: 5
#           failureThreshold: 3
#         livenessProbe:
#           httpGet:
#             path: /
#             port: 3000
#           initialDelaySeconds: 60
#           periodSeconds: 20
#           timeoutSeconds: 5
#           failureThreshold: 3
#         resources:
#           requests:
#             memory: "256Mi"
#             cpu: "100m"
#           limits:
#             memory: "512Mi"
#             cpu: "200m"
#         volumeMounts:
#         - name: tmp
#           mountPath: /tmp
#       volumes:
#       - name: tmp
#         emptyDir: {}

# ---
# # Frontend Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend-service
#   namespace: backend
#   annotations:
#     prometheus.io/scrape: "true"
#     prometheus.io/port: "3000"
# spec:
#   type: LoadBalancer
#   ports:
#   - port: 80
#     targetPort: 3000
#   selector:
#     app: frontend

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: prometheus-storage
#   namespace: backend
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
#   storageClassName: standard-rwo
# ---
# # Grafana PVC
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: grafana-storage
#   namespace: backend
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
#   storageClassName: standard-rwo

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: prometheus
#   namespace: backend
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: prometheus
#   template:
#     metadata:
#       labels:
#         app: prometheus
#     spec:
#       serviceAccountName: prometheus
#       securityContext:
#         fsGroup: 65534
#         runAsUser: 65534
#         runAsGroup: 65534
#         runAsNonRoot: true
#       containers:
#       - name: prometheus
#         image: prom/prometheus:v2.45.0
#         args:
#           - "--config.file=/etc/prometheus/prometheus.yml"
#           - "--storage.tsdb.path=/prometheus"
#           - "--web.enable-lifecycle"
#           - "--storage.tsdb.retention.time=15d"
#           - "--web.enable-admin-api"
#         ports:
#         - containerPort: 9090
#         resources:
#           requests:
#             memory: "256Mi"
#             cpu: "200m"
#           limits:
#             memory: "512Mi"
#             cpu: "400m"
#         volumeMounts:
#         - name: prometheus-config
#           mountPath: /etc/prometheus/
#         - name: prometheus-storage
#           mountPath: /prometheus
#         readinessProbe:
#           httpGet:
#             path: /-/ready
#             port: 9090
#           initialDelaySeconds: 30
#           timeoutSeconds: 5
#           periodSeconds: 10
#         livenessProbe:
#           httpGet:
#             path: /-/healthy
#             port: 9090
#           initialDelaySeconds: 60
#           timeoutSeconds: 5
#           periodSeconds: 10
#         securityContext:
#           allowPrivilegeEscalation: false
#           capabilities:
#             drop:
#               - ALL
#       volumes:
#       - name: prometheus-config
#         configMap:
#           name: prometheus-config
#       - name: prometheus-storage
#         persistentVolumeClaim:
#           claimName: prometheus-storage

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: prometheus-service
#   namespace: backend
# spec:
#   selector:
#     app: prometheus
#   ports:
#   - port: 9090
#     targetPort: 9090
#   type: ClusterIP

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: grafana
#   namespace: backend
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: grafana
#   template:
#     metadata:
#       labels:
#         app: grafana
#     spec:
#       securityContext:
#         fsGroup: 472
#         supplementalGroups:
#           - 0
#       containers:
#       - name: grafana
#         image: grafana/grafana:10.0.0
#         ports:
#         - containerPort: 3000
#         env:
#         - name: GF_SECURITY_ADMIN_PASSWORD
#           value: "admin123"
#         - name: GF_SECURITY_ADMIN_USER
#           value: "admin"
#         - name: GF_SERVER_ROOT_URL
#           value: "http://grafana.awsaparna123.xyz"
#         - name: GF_INSTALL_PLUGINS
#           value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
#         resources:
#           requests:
#             memory: "256Mi"
#             cpu: "100m"
#           limits:
#             memory: "512Mi"
#             cpu: "200m"
#         volumeMounts:
#         - name: grafana-storage
#           mountPath: /var/lib/grafana
#         - name: grafana-datasources
#           mountPath: /etc/grafana/provisioning/datasources
#         - name: grafana-dashboards
#           mountPath: /etc/grafana/provisioning/dashboards
#         - name: grafana-providers
#           mountPath: /etc/grafana/provisioning/dashboards/provider.yaml
#           subPath: provider.yaml
#         - name: grafana-config
#           mountPath: /etc/grafana/grafana.ini
#           subPath: grafana.ini
#         readinessProbe:
#           httpGet:
#             path: /api/health
#             port: 3000
#           initialDelaySeconds: 30
#           timeoutSeconds: 5
#         livenessProbe:
#           httpGet:
#             path: /api/health
#             port: 3000
#           initialDelaySeconds: 60
#           timeoutSeconds: 5
#       volumes:
#       - name: grafana-storage
#         persistentVolumeClaim:
#           claimName: grafana-storage
#       - name: grafana-datasources
#         configMap:
#           name: grafana-datasources
#       - name: grafana-providers
#         configMap:
#           name: grafana-provider
#       - name: grafana-dashboards
#         configMap:
#           name: grafana-dashboards
#       - name: grafana-config
#         configMap:
#           name: grafana-config

# ---
# # Grafana Service
# apiVersion: v1
# kind: Service
# metadata:
#   name: grafana-service
#   namespace: backend
# spec:
#   selector:
#     app: grafana
#   ports:
#   - port: 3000
#     targetPort: 3000
#   type: LoadBalancer
# ---
# # First, let's create a fixed provider ConfigMap
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: grafana-provider
#   namespace: backend
# data:
#   provider.yaml: |
#     apiVersion: 1
#     providers:
#     - name: 'default'
#       orgId: 1
#       folder: ''
#       type: file
#       disableDeletion: false
#       editable: true
#       updateIntervalSeconds: 10
#       allowUiUpdates: true
#       options:
#         path: /etc/grafana/provisioning/dashboards
# ---

# # Grafana Configuration
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: grafana-config
#   namespace: backend
# data:
#   grafana.ini: |
#     [server]
#     root_url = http://grafana.awsaparna123.xyz
#     serve_from_sub_path = true

#     [auth]
#     disable_login_form = false
    
#     [auth.anonymous]
#     enabled = true
#     org_role = Viewer
    
#     [dashboards]
#     min_refresh_interval = 5s
#     default_home_dashboard_path = /etc/grafana/provisioning/dashboards/k8s-cluster-dashboard.json
    
#     [users]
#     default_theme = dark
#     auto_assign_org_role = Editor
    
#     [alerting]
#     enabled = true
#     execute_alerts = true
    
#     [unified_alerting]
#     enabled = true
    
#     [security]
#     allow_embedding = true
#     cookie_secure = false
#     cookie_samesite = lax
    
#     [metrics]
#     enabled = true
#     basic_auth_username = metrics
#     basic_auth_password = metrics123

#     [log]
#     mode = console
#     level = info
    
#     [paths]
#     data = /var/lib/grafana
#     logs = /var/log/grafana
#     plugins = /var/lib/grafana/plugins
#     provisioning = /etc/grafana/provisioning
# ---

apiVersion: v1
kind: Namespace
metadata:
  name: backend

---
# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: backend

---
# MongoDB Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: backend
type: Opaque
stringData:
  MONGO_URL: mongodb+srv://JAYACHANDRAN:KQJrxDn44181NsqT@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: backend

---
# MongoDB ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-configmap
  namespace: backend
data:
  MONGODB_INITDB_DATABASE: "imdb"

---
# Frontend ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: backend
data:
  REACT_APP_BACKEND_API: "http://backend.awsaparna123.xyz:5000/api"


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: backend
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics:8080']

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: backend
data:
  k8s-cluster-dashboard.json: |
    {
      "annotations": {
        "list": []
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 1,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "prometheus"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisCenteredZero": false,
                "axisColorMode": "text",
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 20,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "smooth",
                "lineWidth": 2,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "legend": {
              "calcs": ["mean", "max"],
              "displayMode": "table",
              "placement": "bottom",
              "showLegend": true
            },
            "tooltip": {
              "mode": "multi",
              "sort": "desc"
            }
          },
          "title": "CPU Usage by Pod",
          "type": "timeseries",
          "targets": [
            {
              "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"POD\",container!=\"\"}[5m])) by (pod) * 100",
              "legendFormat": "{{pod}}"
            }
          ]
        }
      ],
      "refresh": "10s",
      "schemaVersion": 38,
      "style": "dark",
      "title": "Kubernetes Cluster Monitoring",
      "uid": "k8s-cluster-monitoring",
      "version": 1
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: backend
data:
  datasources.yaml: |
    apiVersion: 1
    deleteDatasources:
      - name: Prometheus
        orgId: 1

    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        version: 1
        editable: true
        jsonData:
          timeInterval: "15s"
          queryTimeout: "30s"
          httpMethod: POST
          manageAlerts: true
          prometheusType: Prometheus
          prometheusVersion: 2.45.0
        uid: prometheus
        orgId: 1
---
# MongoDB PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data
  namespace: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard-rwo

---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "27017"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mongodb-configmap
              key: MONGODB_INITDB_DATABASE
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-tmp
          mountPath: /tmp
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
      - name: mongodb-tmp
        emptyDir: {}

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "27017"
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    app: mongodb

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: jai3747/imdb-clone-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: PORT
          value: "5000"
        - name: NODE_ENV
          value: "production"
        - name: MONGO_URL
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_URL
        readinessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "5000"
spec:
  type: LoadBalancer
  ports:
  - port: 5000
    targetPort: 5000
  selector:
    app: backend

---
# Frontend Deployment (Completed)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      containers:
      - name: frontend
        image: jai3747/imdb-clone-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "3000"
        - name: REACT_APP_BACKEND_API
          valueFrom:
            configMapKeyRef:
              name: frontend-config
              key: REACT_APP_BACKEND_API
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app: frontend

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: backend
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard-rwo

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsGroup: 65534
        runAsNonRoot: true
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus"
          - "--web.enable-lifecycle"
          - "--storage.tsdb.retention.time=15d"
          - "--web.enable-admin-api"
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: backend
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SERVER_ROOT_URL
          value: "http://grafana.awsaparna123.xyz"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-provider
          mountPath: /etc/grafana/provisioning/dashboards/provider.yaml
          subPath: provider.yaml
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 5
          periodSeconds: 10
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-provider
        configMap:
          name: grafana-provider
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-config
        configMap:
          name: grafana-config

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: backend
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provider
  namespace: backend
data:
  provider.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /etc/grafana/provisioning/dashboards
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: backend
data:
  grafana.ini: |
    [server]
    root_url = http://grafana.awsaparna123.xyz
    serve_from_sub_path = true

    [auth]
    disable_login_form = false
    
    [auth.anonymous]
    enabled = true
    org_role = Viewer
    
    [dashboards]
    min_refresh_interval = 5s
    
    [users]
    default_theme = dark
    auto_assign_org_role = Editor
    
    [alerting]
    enabled = true
    execute_alerts = true
    
    [unified_alerting]
    enabled = true
    
    [security]
    allow_embedding = true
    cookie_secure = false
    cookie_samesite = lax
    
    [metrics]
    enabled = true
    basic_auth_username = metrics
    basic_auth_password = metrics123

    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
